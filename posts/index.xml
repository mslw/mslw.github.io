<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Michał Szczepanik</title><link>https://mslw.github.io/posts/</link><description>Recent content in Posts on Michał Szczepanik</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 09 Dec 2022 23:45:00 +0100</lastBuildDate><atom:link href="https://mslw.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Circular pour-over</title><link>https://mslw.github.io/posts/2022-12-09-pourover/</link><pubDate>Fri, 09 Dec 2022 23:45:00 +0100</pubDate><guid>https://mslw.github.io/posts/2022-12-09-pourover/</guid><description>Two weeks ago, James Hoffman posted &amp;#34;A better 1 cup V60 Technique&amp;#34;, an update to his &amp;#34;Ultimate V60 technique&amp;#34; adjusted to smaller servings. I was pleasantly surprised that the 1 cup technique is more simialr (very similar, in fact) to the technique I&amp;#39;ve been using for a long time; that is, the drip recipe from The Barn. Have we gone full circle?
The Barn was pretty much my gateway into speciality coffee, back during my university years (around 2015, probably).</description><content type="html"><![CDATA[<p>
Two weeks ago, James Hoffman posted &#34;<a href="https://www.youtube.com/watch?v=1oB1oDrDkHM">A better 1 cup V60 Technique</a>&#34;, an update to his &#34;<a href="https://www.youtube.com/watch?v=AI4ynXzkSQo">Ultimate V60 technique</a>&#34; adjusted to smaller servings.
I was pleasantly surprised that the 1 cup technique is more simialr (very similar, in fact) to the technique I&#39;ve been using for a long time; that is, the <a href="https://thebarn.de/pages/brewguide-drip">drip recipe</a> from The Barn.
Have we gone full circle?</p>
<p>
The Barn was pretty much my gateway into speciality coffee, back during my university years (around 2015, probably).
I believe the recipe from the link above is the same at the moment of writing as it was back then.
Anyway, the recipe from The Barn goes as follows:</p>
<ul>
<li>16 g coffee to 250 ml water</li>
<li>bloom: 30-40 grams, 30 seconds</li>
<li>second pour: fill up to 100 grams</li>
<li>three subsequent pours: 50 grams each, not letting the water level go too high or drop entirely</li>
<li>target time of 2:30</li>
</ul>
<p>James&#39; 1 cup recipe differs in the following:</p>
<ul>
<li>dose ever so slightly smaller, 15 g (and finer ground suggested)</li>
<li>bigger bloom: 50 grams, 45 seconds, with a solid but gentle swirl</li>
<li>smaller second pour (but same total at this stage): fill up to 100 ml</li>
<li>same three subsequent pours: 50 grams each; more emphasis on pace – 10 seconds pour (5 ml/s) and 10 seconds pause; very light swirl after last pour</li>
<li>target time of around 3:00</li>
</ul>
<p>So basically the same procedure, except for the larger, longer bloom, and swirling.</p>
<p>
In contrast, James&#39; ultimate V60 technique had two pours, almost back to back with each other, after the bloom: a faster one to reach 60 % of target weight (pretty much topping the filter), and a slower one for the remaining 40 %.
The base proportion was 30 g coffee to 500 ml water.
Alternatives are, of course, countless.
Coincidentally, almost in parallel to James&#39; 1 cup technique, Lance Hendrick posted his &#34;<a href="https://www.youtube.com/watch?v=BG5Tc8MR2_4">ultimate recipe</a>&#34;.
Interestingly, he uses a coarser grind, does a much longer blooom (1-2 minutes, with triple the coffee weight in water), and pours the remaining water in one continuous pour.</p>
<p>
In the end, the recipe from The Barn sits very well with me.
The process is easy to remember, and it&#39;s easy to pace the pulses just by looking at the water level.
And most importantly, I like the pours I get.</p>
]]></content></item><item><title>E-mail in Emacs with Notmuch</title><link>https://mslw.github.io/posts/2022-11-20-emacs-notmuch/</link><pubDate>Sun, 20 Nov 2022 16:15:00 +0100</pubDate><guid>https://mslw.github.io/posts/2022-11-20-emacs-notmuch/</guid><description>I switched to reading and writing my e-mail in Emacs with Notmuch. The first impressions are good – I like the simplicity brought by text interface, and the workflow focused on tagging, archiving, and searching.
There is a ton of blog posts on configuring e-mail in Emacs already (I link several at the end). One thing that was important for me and not easy to find was S/MIME signing, so I will describe it in more detail, and be more concise about other aspects.</description><content type="html"><![CDATA[
<p>
I switched to reading and writing my e-mail in <a href="https://www.gnu.org/software/emacs/">Emacs</a> with <a href="https://notmuchmail.org/">Notmuch</a>.
The first impressions are good – I like the simplicity brought by text interface, and the workflow focused on tagging, archiving, and searching.</p>
<p>
There is a ton of blog posts on configuring e-mail in Emacs already (I link several at the end).
One thing that was important for me and not easy to find was S/MIME signing, so I will describe it in more detail, and be more concise about other aspects.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Overview
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>
E-mail workflow in Emacs requires several pieces, in line with the Unix philosophy, &#34;make each program do one thing well&#34;.
This can seem scary at first (<em>where do I begin?</em>), but is actually very nice: you can deal with pieces one at a time, knowing that you can always swap things out later on.
Moreover, pretty much all of the components are surprisingly turnkey.
In <a href="https://www.reddit.com/r/emacs/comments/4rl0a9/comment/d52q08p/">this comment on Reddit</a>, u/IceDane nicely explains what are the pieces you need.
Listing along his categories, these are the ones I chose:</p>
<ul>
<li>something to fetch your email: isync (mbsync);</li>
<li>something to send mail: msmtp;</li>
<li>something to view your mail: Notmuch.</li>
</ul>
<p>I would also add two minor categories:</p>
<ul>
<li>something to manage your passwords: pass;</li>
<li>something to encrypt/sign your messages: gpgsm.</li>
</ul>
<p>Let&#39;s go over the entire setup, starting with signing, as this part was slightly unusual in my case.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
S/MIME signing
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>
My employer strongly recommends that I sign my e-mails using an S/MIME (X.509) certificate issued by them.
The key difference from another standard, PGP, is that S/MIME relies on certificate authorities to establish trust, while PGP relies on a decentralised web of trust.
S/MIME is seamlessly integrated into standard e-mail clients (Outlook, Thunderbird), but is less popular in the free software world, and less documented for the software we will use.</p>
<p>
For signing e-mails in Emacs, very little changes between PGP and S/MIME.
In both cases, the cryptography is handed over to GnuPG.
For S/MIME, the specific utility which handles signing would be <code class="verbatim">gpgsm</code>, the lesser known sibling of the <code class="verbatim">gpg</code> program.</p>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Importing the certificate into gpgsm
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>I have my X.509 certificate in a .p12 (PKCS) file.
Although <code class="verbatim">gpgsm</code> should be able to import it, it errors on some files of this type (hopefully not all?), as it did for mine:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">❱ gpgsm --import mypkcsfile.p12
</span></span><span class="line"><span class="cl">gpgsm: data error at &#34;data.objectidentifier&#34;, offset 67
</span></span><span class="line"><span class="cl">gpgsm: error at &#34;bag-sequence&#34;, offset 49
</span></span><span class="line"><span class="cl">gpgsm: error parsing or decrypting the PKCS#12 file
</span></span><span class="line"><span class="cl">gpgsm: total number processed: 0</span></span></code></pre></div>
</div>
<p>
This is apparently due to having additional certificates (full chain) in the file.
I had to disassemble and reassemble the file with <code class="verbatim">openssl</code> before importing into <code class="verbatim">gpgsm</code>.
The following is based on <a href="https://git.scc.kit.edu/-/snippets/572">this snippet</a>:</p>
<div class="src src-bash">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># extract user certificate</span>
</span></span><span class="line"><span class="cl">openssl pkcs12 -in mypkcsfile.p12 -clcerts -nokeys -out user_cert.pem
</span></span><span class="line"><span class="cl"><span class="c1"># extract private key</span>
</span></span><span class="line"><span class="cl">openssl pkcs12 -in mypkcsfile.p12 -nocerts -out user_key.pem
</span></span><span class="line"><span class="cl"><span class="c1"># merge them back</span>
</span></span><span class="line"><span class="cl">openssl pkcs12 -export -in user_cert.pem -inkey user_key.pem -out user_cert.p12
</span></span><span class="line"><span class="cl"><span class="c1"># import into gpgsm</span>
</span></span><span class="line"><span class="cl">gpgsm --import user_cert.p12
</span></span><span class="line"><span class="cl"><span class="c1"># see that it worked</span>
</span></span><span class="line"><span class="cl">gpgsm --list-secret-keys
</span></span><span class="line"><span class="cl">gpgsm --list-keys</span></span></code></pre></div>
</div>
<p>
The commands will prompt for a password for the pkcs file, and the newly created files, as it is good practice to password-protect private keys.</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
Trusting the root certificate
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<p>Although our GnuPG knows the secret key now, it won&#39;t trust it, and will refuse to use it for signing.
Unlike <code class="verbatim">gpg</code>, <code class="verbatim">gpgsm</code> has no option to edit the key trust level, and this is handled through config files instead.</p>
<p>
This mechanism is kind-of explained (mentioned) in the gpgsm&#39;s <a href="https://man.archlinux.org/man/gpgsm.1.en">man page</a>, for example in the FILES section when describing <code class="verbatim">qualified.txt</code>:</p>
<blockquote>
<p>This is the list of root certificates used for qualified certificates.  They are defined as certificates capable  of
creating  legally binding signatures in the same way as handwritten signatures are. (…)</p>
<p>
Note  that even if a certificate is listed in this file, this does not mean that the certificate is trusted; in gen‐
eral the certificates listed in this file need to be listed also in ‘trustlist.txt’.</p>
</blockquote>
<p>
The <a href="https://wiki.gnupg.org/X.509">GnuPG Wiki</a> links to this mailing list <a href="https://lists.gnupg.org/pipermail/gnupg-devel/2011-June/026126.html">message</a> from 2011 with more explanations, and <a href="https://www.gnupg.org/documentation/manuals/gnupg/Agent-Configuration.html">GnuPG manual for gpg-agent configuration</a> describes trustlist.txt, but the real source of help was the <a href="https://www.mew.org/en/feature/smime.html">documentation page</a> for mew, another (now unmaintained?) e-mail reader for Emacs (see &#34;Trusting your root CA&#34; section there).</p>
<p>
First, you need to find the root certificate.
To do so, list the imported keys and look for one which is self-signed (Issuer and Subject are the same).
In my key chain, it was one issued by <a href="https://www.telesec.de/">TeleSec</a>.</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">   ❱ gpgsm --list-keys
</span></span><span class="line"><span class="cl">     (...)
</span></span><span class="line"><span class="cl">	    ID: 0x17D894E9
</span></span><span class="line"><span class="cl">	   S/N: 01
</span></span><span class="line"><span class="cl">	 (dec): 1
</span></span><span class="line"><span class="cl">	Issuer: /CN=T-TeleSec GlobalRoot Class 2/OU=T-Systems Trust Center/O=T-Systems Enterprise Services GmbH/C=DE
</span></span><span class="line"><span class="cl">       Subject: /CN=T-TeleSec GlobalRoot Class 2/OU=T-Systems Trust Center/O=T-Systems Enterprise Services GmbH/C=DE
</span></span><span class="line"><span class="cl">      validity: 2008-10-01 10:40:14 through 2033-10-01 23:59:59
</span></span><span class="line"><span class="cl">      key type: 2048 bit RSA
</span></span><span class="line"><span class="cl">     key usage: certSign crlSign
</span></span><span class="line"><span class="cl">  chain length: unlimited
</span></span><span class="line"><span class="cl">   fingerprint: 59:0D:2D:7D:88:4F:40:2E:61:7E:A5:62:32:17:65:CF:17:D8:94:E9
</span></span><span class="line"><span class="cl">      sha2 fpr: 91:E2:F5:78:8D:58:10:EB:A7:BA:58:73:7D:E1:54:8A:8E:CA:CD:01:45:98:BC:0B:14:3E:04:1B:17:05:25:52</span></span></code></pre></div>
</div>
<p>
Then, you need to copy the fingerprint, and paste it into <code class="verbatim">~/.gnupg/trustlist.txt</code> (just the fingerprint value, in a single line, creating the file if necessary).
The mew docs also say that if the root key doesn&#39;t specify &#34;key usage&#34; (mine does), you also need to append &#34; S relax&#34; to the line with the fingerprint.</p>
<p>
To verify that it worked, create and verify a detached signature:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">  ❱ gpgsm --detach-sign file &gt; sig
</span></span><span class="line"><span class="cl">  ❱ gpgsm --verify sig file</span></span></code></pre></div>
</div>
<p>
And that&#39;s it! Hard to find instructions, but easy to do.</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-5" class="outline-2">
<h2 id="headline-5">
Step-by-step guide
</h2>
<div id="outline-text-headline-5" class="outline-text-2">
<p>
Below is a step-by-step guide for my configuration.
It is based on my note-taking during setup, and I&#39;ll keep it in the form of bullet points with resource links and minimal snippets.</p>
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
Preliminary: storing the e-mail password
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<ul>
<li>Use <a href="https://www.passwordstore.org/">pass</a> (keepassxc would be an option, but there&#39;s no way to cache password).</li>
<li>Pass relies on gpg for encryption, need to have a gpg key <a href="https://docs.fedoraproject.org/en-US/quick-docs/create-gpg-keys/#creating-gpg-keys-cli">created</a>: <code class="verbatim">gpg --full-generate-key</code>.</li>
<li><code class="verbatim">pass init &lt;gpg key id&gt;</code> and <code class="verbatim">pass insert Email/example.com</code></li>
<li>When decryption is needed, gpg-agent will pop up a prompt window, asking for the encryption key password (it will be cached for a configurable amount of time).</li>
<li>For a more complete GPG key management, Debian wiki explains <a href="https://wiki.debian.org/Subkeys">subkeys</a> nicely.</li>
</ul>
</div>
</div>
<div id="outline-container-headline-7" class="outline-3">
<h3 id="headline-7">
Getting mail: isync configuration
</h3>
<div id="outline-text-headline-7" class="outline-text-3">
<ul>
<li>
<p>Config file, <code class="verbatim">~/.mbsyncrc</code>, based on <a href="https://wiki.archlinux.org/title/Isync#Configuring">arch wiki</a>:</p>
<div class="src src-conf">
<pre tabindex="0"><code class="language-conf" data-lang="conf">IMAPAccount work
Host imap.example.com
User me@example.com
PassCmd &#34;pass Email/example.com&#34;
SSLType IMAPS

IMAPStore work-remote
Account work

MaildirStore work-local
SubFolders Verbatim
Path ~/.mail/work/
Inbox ~/.mail/work/Inbox

Channel work
Far :work-remote:
Near :work-local:
Create Both
Expunge Both
SyncState *</code></pre>
</div>
</li>
<li>To get new version of isync on Debian stable (1.4.4, has Far &amp; Near keywords): <code class="verbatim">sudo apt install isync/bullseye-backports</code>.</li>
<li>Create a folder to store e-mails: <code class="verbatim">mkdir ~/.mail/work</code>.</li>
<li>Sync: <code class="verbatim">mbsync -V work</code>.</li>
</ul>
</div>
</div>
<div id="outline-container-headline-8" class="outline-3">
<h3 id="headline-8">
Notmuch configuration
</h3>
<div id="outline-text-headline-8" class="outline-text-3">
<div id="outline-container-headline-9" class="outline-4">
<h4 id="headline-9">
Notmuch itself
</h4>
<div id="outline-text-headline-9" class="outline-text-4">
<ul>
<li>Official guide: <a href="https://notmuchmail.org/getting-started/">Getting Started with Notmuch</a>.</li>
<li>Basic configuration: <code class="verbatim">notmuch</code>.</li>
<li>Indexing: <code class="verbatim">notmuch new</code>.</li>
</ul>
</div>
</div>
<div id="outline-container-headline-10" class="outline-4">
<h4 id="headline-10">
Notmuch Emacs Interface
</h4>
<div id="outline-text-headline-10" class="outline-text-4">
<ul>
<li>Official guide: <a href="https://notmuchmail.org/notmuch-emacs/">Notmuch Emacs Interface</a>.</li>
<li>
<p>Add a minimal configuration to <code class="verbatim">~/.emacs.d/init.el</code> (autoload, sorting, closing messages):</p>
<div class="src src-lisp">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">autoload</span> <span class="ss">&#39;notmuch</span> <span class="s">&#34;notmuch&#34;</span> <span class="s">&#34;notmuch mail&#34;</span> <span class="no">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">setq</span> <span class="nv">notmuch-search-oldest-first</span> <span class="no">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">setq</span> <span class="nv">message-kill-buffer-on-exit</span> <span class="no">t</span><span class="p">)</span></span></span></code></pre></div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-11" class="outline-3">
<h3 id="headline-11">
Sending email
</h3>
<div id="outline-text-headline-11" class="outline-text-3">
<ul>
<li>Could use <a href="https://www.gnu.org/software/emacs/manual/html_mono/smtpmail.html">Emacs SMTP Library</a> directly.</li>
<li>Using msmtp for now, seems more popular and easy to configure.</li>
<li><code class="verbatim">apt install msmtp</code></li>
<li>
<p>msmtp config in <code class="verbatim">~/.msmtprc</code>, based on <a href="https://wiki.archlinux.org/title/Msmtp">Arch wiki</a>:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"># Set default values for all following accounts.
</span></span><span class="line"><span class="cl">defaults
</span></span><span class="line"><span class="cl">auth           on
</span></span><span class="line"><span class="cl">tls            on
</span></span><span class="line"><span class="cl">logfile        ~/.msmtp.log
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># work
</span></span><span class="line"><span class="cl">account        work
</span></span><span class="line"><span class="cl">host           mail.example.com
</span></span><span class="line"><span class="cl">port           587
</span></span><span class="line"><span class="cl">from           me@example.com
</span></span><span class="line"><span class="cl">user           me@example.com
</span></span><span class="line"><span class="cl">passwordeval   &#34;pass Email/example.com&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Set a default account
</span></span><span class="line"><span class="cl">account default : work</span></span></code></pre></div>
</div>
</li>
<li>
<p>Emacs config in <code class="verbatim">~/.emacs.d/init.el</code>:</p>
<div class="src src-lisp">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="cl"><span class="c1">;; msmtp</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">setq</span> <span class="nv">send-mail-function</span> <span class="ss">&#39;sendmail-send-it</span>
</span></span><span class="line"><span class="cl"><span class="nv">sendmail-program</span> <span class="s">&#34;/usr/bin/msmtp&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">mail-specify-envelope-from</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl"><span class="nv">message-sendmail-envelope-from</span> <span class="ss">&#39;header</span>
</span></span><span class="line"><span class="cl"><span class="nv">mail-envelope-from</span> <span class="ss">&#39;header</span><span class="p">)</span></span></span></code></pre></div>
</div>
</li>
</ul>
</div>
</div>
<div id="outline-container-headline-12" class="outline-3">
<h3 id="headline-12">
Signing
</h3>
<div id="outline-text-headline-12" class="outline-text-3">
<ul>
<li>
<p>Configure GnuPg (gpgsm) as explained above:</p>
<ul>
<li>import certificate,</li>
<li>add root certificate to trust list.</li>
</ul>
</li>
<li>
<p>Enable signing by default in <code class="verbatim">~/.emacs.d/init.el</code>:</p>
<div class="src src-lisp">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="cl"><span class="c1">;; smime</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">setq</span> <span class="nv">mml-secure-smime-sign-with-sender</span> <span class="no">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;message-setup-hook</span> <span class="ss">&#39;mml-secure-message-sign-smime</span><span class="p">)</span></span></span></code></pre></div>
</div>
</li>
</ul>
<p>Note: the above would insert the MML secure tag (<code class="verbatim">&lt;#secure method=smime mode=sign&gt;</code>) at the beginning of message body.
The message would be signed upon sending (see <a href="https://www.gnu.org/software/Emacs/manual/html_node/message/Signing-and-encryption.html">Emacs manual on signing and encrypyting commands</a>.</p>
</div>
</div>
<div id="outline-container-headline-13" class="outline-3">
<h3 id="headline-13">
Notmuch hooks
</h3>
<div id="outline-text-headline-13" class="outline-text-3">
<ul>
<li>I trigger updates manually from emacs-notmuch (&#34;G&#34; in Notmuch screen).</li>
<li>I use the hooks to fetch and tag incoming e-mails.</li>
<li>Hooks are described by <code class="verbatim">man notmuch-hooks</code> (<a href="https://man.archlinux.org/man/community/notmuch-runtime/notmuch-hooks.5.en">online version</a>).</li>
<li>They must be saved without extension in <code class="verbatim">$DATABASEDIR/.notmuch/hooks/*</code> and made executable (<code class="verbatim">chmod +x</code>).</li>
<li>
<p><code class="verbatim">pre-new</code>, &#34;typically this hook is used for fetching or delivering new mail to be imported into the database&#34;:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">mbsync work</span></span></code></pre></div>
</div>
</li>
<li>
<p><code class="verbatim">post-new</code>, &#34;typically this hook is used to perform additional query-based tagging on the imported messages&#34;:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">notmuch tag -unread -inbox +sent -- tag:inbox and from:me@example.com</span></span></code></pre></div>
</div>
</li>
<li>I tried using <code class="verbatim">post-insert</code> to handle my sent messages but couldn&#39;t make it work, so I tag them in post-new instead.</li>
<li>I plan to add separate tags for mailing lists: <a href="https://notmuchmail.org/initial_tagging/">Notmuch - initial tagging</a>.</li>
</ul>
</div>
</div>
<div id="outline-container-headline-14" class="outline-3">
<h3 id="headline-14">
Mail footer signature
</h3>
<div id="outline-text-headline-14" class="outline-text-3">
<ul>
<li>
<p>Emacs manual, <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Mail-Signature.html">Mail Signature</a>:</p>
<ul>
<li>create text file, <code class="verbatim">~/.signature</code>,</li>
<li>insert always by default, or disable and use <code class="verbatim">C-c C-w</code> to insert manually.</li>
</ul>
</li>
</ul>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-15" class="outline-2">
<h2 id="headline-15">
Link collection
</h2>
<div id="outline-text-headline-15" class="outline-text-2">
<p>The following pages have been useful, and describe different setups:</p>
<ul>
<li><a href="https://skeptric.com/emacs-email/">https://skeptric.com/emacs-email/</a></li>
<li><a href="https://frostyx.cz/posts/synchronize-your-2fa-gmail-with-mbsync">https://frostyx.cz/posts/synchronize-your-2fa-gmail-with-mbsync</a></li>
<li><a href="https://systemcrafters.net/emacs-mail/">https://systemcrafters.net/emacs-mail/</a></li>
<li><a href="http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/">http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/</a></li>
<li><a href="https://bostonenginerd.com/posts/notmuch-of-a-mail-setup-part-1-mbsync-msmtp-and-systemd/">https://bostonenginerd.com/posts/notmuch-of-a-mail-setup-part-1-mbsync-msmtp-and-systemd/</a></li>
<li><a href="https://www.reddit.com/r/emacs/comments/4rl0a9/email_in_emacs_i_want_to_but_wow_its_overwhelming/">https://www.reddit.com/r/emacs/comments/4rl0a9/email_in_emacs_i_want_to_but_wow_its_overwhelming/</a></li>
<li><a href="https://jonathanchu.is/posts/emacs-notmuch-isync-msmtp-setup/">https://jonathanchu.is/posts/emacs-notmuch-isync-msmtp-setup/</a></li>
<li><a href="https://firminmartin.com/en/posts/2020/10/read_email_in_emacs_with_notmuch/">https://firminmartin.com/en/posts/2020/10/read_email_in_emacs_with_notmuch/</a></li>
</ul>
</div>
</div>
]]></content></item><item><title>From my font folder</title><link>https://mslw.github.io/posts/2022-06-17-fonts/</link><pubDate>Fri, 17 Jun 2022 17:30:00 +0200</pubDate><guid>https://mslw.github.io/posts/2022-06-17-fonts/</guid><description>I spend a large part of my workday staring at a text on a computer screen. Sometimes, I also need to produce some text that needs to be beamed onto a wall, plotted onto a large piece of paper, or printed on a bunch of A4s. I like when these things look nice.
Polish type designer Łukasz Dziedzic said in an interview (in Polish, translation mine):
Letters give us plenty of information, but they do so in a way which is completely unnoticeable.</description><content type="html"><![CDATA[
<p>
I spend a large part of my workday staring at a text on a computer screen.
Sometimes, I also need to produce some text that needs to be beamed onto a wall, plotted onto a large piece of paper, or printed on a bunch of A4s.
I like when these things look nice.</p>
<p>
Polish type designer Łukasz Dziedzic said in an <a href="https://wiadomosci.gazeta.pl/wiadomosci/7,143647,18850417,lato-podbija-swiat-czyli-jak-nieudane-zlecenie-doprowadzilo.html">interview</a> (in Polish, translation mine):</p>
<blockquote>
<p>Letters give us plenty of information, but they do so in a way which is completely unnoticeable.
They are a bit like music in a movie, which can change its mood — if during a tragic scene the score was cheerful, we would perceive what we see in an entirely different manner.
And vice versa.
With letters it is similar, only more discreet.</p>
</blockquote>
<p>
Without further ado, here is a short listing of my favourite fonts.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Serif
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
Cormorant
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>
   Extremely elegant. This has become my go-to font for &#34;serious&#34; documents.
   I used it for my CV and my doctoral thesis.
   It&#39;s similar in style to Garamond, but remains noticeably different.
   According to author&#39;s description, it has been <em>heavily inspired by Claude Garamont&#39;s immortal legacy</em>, but <em>most glyphs were drawn from scratch</em>.</p>
<p>
   One interesting feature is that the distinction between hyphen (-) and en-dash (–) is made very visible, as the former is drawn slightly slanted.
   This makes hyphenated words look great (as the connection is nicely flowing), but incorrect usage (as minus sign, or in numeric ranges) stand out way more.
   Due diligence to enter everything properly is required when writing in LaTeX.</p>
<p>
   Speaking of Garamond itself, this classic font has several digital versions, including Adobe Garamond and OFL-licensed EB Garamond (<a href="https://en.wikipedia.org/wiki/Garamond">Wikipedia page on Garamond</a> is very comprehensive).
   Cormorant family includes a style named Garamond, which introduces some subtle changes compared to default, but definitely remains Cormorant.</p>
<p>
   <img src="/img/fonts/Cormorant.png" alt="/img/fonts/Cormorant.png" title="/img/fonts/Cormorant.png" /></p>
<p>
   See: <a href="https://fonts.google.com/specimen/Cormorant">Google Fonts</a> / <a href="https://www.behance.net/gallery/28579883/Cormorant-an-open-source-display-font-family">Behance</a> / <a href="https://github.com/CatharsisFonts/Cormorant">GitHub</a>.
   Author: Christian Thalmann, Catharsis Fonts.
   License: OFL.</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Antykwa Półtawskiego (Półtawski&#39;s antiqua)
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>
   Designed in the 1920s and brought into the digital world in early 2000s by the Polish TeX Users Group (GUST).
   At the time, diacritics in LaTeX caused some headaches.
   Unicode wasn&#39;t as common, many fonts lacked Polish symbols, and users had to define font and character encoding to use a proper adaptation of <a href="https://en.wikipedia.org/wiki/Computer_Modern">Computer Modern</a> fonts.
   Being able to use a font in which Polish characters were designed from ground up (as opposed to adding diacritics on top of existing characters) was quite something.</p>
<p>
   In 2020, the font was digitized again, from scratch, based on materials (fonts, scans, drawings) from a Polish foundry <em>Idźkowski i S-ka</em> and a British printing press manufacturer <em>Monotype Salfords</em>.
   This version, shown below, was called Półtawski Nowy (Półtawski New) and is distributed under free-as-in-beer custom license (which, sadly, forbids redistribution and requires registration to download)<sup class="footnote-reference"><a id="footnote-reference-1" href="#footnote-1">1</a></sup>.
   The reissue was accompanied by a really nice publication on the <a href="http://poltawski-nowy.wtf/wp-content/uploads/2020/12/POLTAWSKI_BOOK_WEB.pdf">font&#39;s history</a> (PDF, 14.9 MB)<sup class="footnote-reference"><a id="footnote-reference-2" href="#footnote-2">2</a></sup>.</p>
<p>
   I don&#39;t really like antiqua, but I like the font&#39;s historical significance (both its origin and digitization).</p>
<p>
   <img src="/img/fonts/Poltawski_Nowy.png" alt="/img/fonts/Poltawski_Nowy.png" title="/img/fonts/Poltawski_Nowy.png" /></p>
<p>
   See: <a href="https://www.gust.org.pl/projects/e-foundry/poltawski">GUST</a> / <a href="https://en.wikipedia.org/wiki/Antykwa_P%C3%B3%C5%82tawskiego">Wikipedia</a> / <a href="http://poltawski-nowy.wtf/">Półtawski Nowy</a>.</p>
<p>Author (original): Adam Półtawski.
   Authors (Antykwa Półtawskiego): Janusz M. Nowacki, Bogusław Jackowski &amp; Piotr Strzelczyk, GUST.
   Authors (Półtawski Nowy): Mateusz Machalski, Borys Kosmynka, Ania Weluńska, Andrzej Tomaszewski, Adam Twardoch.
   License (Antykwa Półtawskiego): GUST font license (GFL, based on LaTeX Project Public License, LPPL).
   License (Półtawski Nowy): custom.</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
Vollkorn
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<p>
   I discovered Vollkorn as it came installed among the fonts available on my Tolino<sup class="footnote-reference"><a id="footnote-reference-3" href="#footnote-3">3</a></sup> e-book reader.
   Its tagline says <em>the free and healthy typeface for bread and butter use</em>, but for me it evokes the slightly oldschool, printed book feeling.</p>
<p>
   <img src="/img/fonts/Vollkorn.png" alt="/img/fonts/Vollkorn.png" title="/img/fonts/Vollkorn.png" /></p>
<p>
   See: <a href="https://fonts.google.com/specimen/Vollkorn">Google Fonts</a> / <a href="https://github.com/FAlthausen/Vollkorn-Typeface">GitHub</a> / <a href="http://vollkorn-typeface.com/">Project page</a>.
   Author: Friedrich Althausen.
   License: OFL.</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-5" class="outline-2">
<h2 id="headline-5">
Monospace
</h2>
<div id="outline-text-headline-5" class="outline-text-2">
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
Anonymous Pro
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<p>
   My current favourite, I&#39;ve had it selected in Emacs and in the terminal for quite a while now.
   Light and very readable, slightly angular, but with a nice degree of roundness.
   Looks cool and modern, and clearly signals &#34;programming font&#34;.</p>
<p>
   <img src="/img/fonts/Anonymous_Pro.png" alt="/img/fonts/Anonymous_Pro.png" title="/img/fonts/Anonymous_Pro.png" /></p>
<p>
   See: <a href="https://fonts.google.com/specimen/Anonymous+Pro">Google Fonts</a> / <a href="https://www.marksimonson.com/fonts/view/anonymous-pro">Mark Simonson Studio</a>.
   Author: Mark Simonson.
   License: OFL.</p>
</div>
</div>
<div id="outline-container-headline-7" class="outline-3">
<h3 id="headline-7">
Hack
</h3>
<div id="outline-text-headline-7" class="outline-text-3">
<p>
   Pleasantly rounded (more so than Anonymous Pro, and also slightly heavier), very readable, and with a great name, it&#39;s my second go-to monospace font.
   For a long time, I used it to liven up my Matlab window.
   I&#39;m especially fond of the zero filled with a slender vertical oval (instead of a more common slashed zero).</p>
<p>
   <img src="/img/fonts/Hack.png" alt="/img/fonts/Hack.png" title="/img/fonts/Hack.png" /></p>
<p>
   See: <a href="https://sourcefoundry.org/hack/">Source foundry</a>.
   Authors: Chris Simpkins, David van Gemeren (design).
   Licence: MIT.</p>
</div>
</div>
<div id="outline-container-headline-8" class="outline-3">
<h3 id="headline-8">
Iosevka
</h3>
<div id="outline-text-headline-8" class="outline-text-3">
<p>
   My most recent discovery.
   Sleek and balancing roundness with angularity, it looks cool and has some of the features which I like in Anonymous Pro.
   The default is unusually slim (&#34;spatially efficient&#34;) — useful for fitting long lines into a window or a status bar, but too condensed for my liking.
   I&#39;m currently giving the alternative, &#34;extended&#34; version a try (<em>If you prefer more breeze between the character, choose Extended and enjoy</em> — says the website).</p>
<p>
   Two widths aside, there are (too) many flavours and variations. Importantly, there are three main monospace fonts with slight differences (Iosevka, Iosevka Terminal, Iosevka Fixed),
   and two &#34;quasi-proportional&#34; for general writing (Iosevka Aile, Iosevka Etoile).</p>
<p>
   <img src="/img/fonts/Iosevka.png" alt="/img/fonts/Iosevka.png" title="/img/fonts/Iosevka.png" /></p>
<p>
   See: <a href="https://en.wikipedia.org/wiki/Iosevka">Wikipedia</a> / <a href="https://typeof.net/Iosevka/">typeof.net</a>.
   Author: Renzhi Li (aka. Belleve Invis).
   License: OFL.</p>
</div>
</div>
<div id="outline-container-headline-9" class="outline-3">
<h3 id="headline-9">
Monaco / Menlo
</h3>
<div id="outline-text-headline-9" class="outline-text-3">
<p>
   A honorable mention goes to Monaco and Menlo, the former and current monospace default on Mac.
   Both ship with MacOS, and to me they both have a similar rounded and elegant quality.
   I used both a lot when I worked on MacOS.</p>
<p>
   See: <a href="https://en.wikipedia.org/wiki/Monaco_(typeface)">Wikipedia (Monaco)</a> / <a href="https://en.wikipedia.org/wiki/Menlo_(typeface)">Wikipedia (Menlo)</a>.
   Author: Susan Kare (Monaco) / Jim Lyles (Menlo).
   License: proprietary.</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-10" class="outline-2">
<h2 id="headline-10">
Sans-serif
</h2>
<div id="outline-text-headline-10" class="outline-text-2">
<div id="outline-container-headline-11" class="outline-3">
<h3 id="headline-11">
Lato
</h3>
<div id="outline-text-headline-11" class="outline-text-3">
<p>
   Another Polish connection, with an interesting backstory: it was commisioned by a big company which withdrew close to the end of the project.
   The author then released it under an open license, and the font gained a lot of popularity.
   Light, clean, and far from boring, in my opinion it works great for presentations and posters.</p>
<p>
   <img src="/img/fonts/Lato.png" alt="/img/fonts/Lato.png" title="/img/fonts/Lato.png" /></p>
<p>
   See: <a href="https://en.wikipedia.org/wiki/Lato_(typeface)">Wikipedia</a> / <a href="https://fonts.google.com/specimen/Lato">Google Fonts</a> / <a href="http://lukaszdziedzic.eu/">Łukasz Dziedzic</a>.
   Author: Łukasz Dziedzic.
   License: OFL.</p>
</div>
</div>
<div id="outline-container-headline-12" class="outline-3">
<h3 id="headline-12">
Carlito
</h3>
<div id="outline-text-headline-12" class="outline-text-3">
<p>
   <a href="https://blogs.gnome.org/uraeus/2013/10/10/a-thank-you-to-google/">Metrically compatible</a> with the proprietary Calibri, useful for filling in documents created in Word and laid out based on Calibri.</p>
<p>
   According to this <a href="https://github.com/google/fonts/issues/1441#issuecomment-750044948">comment in a GitHub PR</a> to google fonts, Carlito was derived from Lato in a semi-automatic fashion (to fit letter widths), and the entire discussion below that comment is worth reading.
   Indeed, it carries some of Lato character - but in said discussion it has also been described (by a co-author?) as <em>just an ugly Frankenstein monster</em>.</p>
<p>
   <img src="/img/fonts/Carlito.svg" alt="/img/fonts/Carlito.svg" title="/img/fonts/Carlito.svg" /></p>
<p>
   See: <a href="https://en.wikipedia.org/wiki/Croscore_fonts#Crosextra_fonts">Wikipedia</a>.
   Author: Łukasz Dziedzic (?).
   License: OFL.</p>
</div>
</div>
<div id="outline-container-headline-13" class="outline-3">
<h3 id="headline-13">
Futura
</h3>
<div id="outline-text-headline-13" class="outline-text-3">
<p>
   A honorable mention in this category goes to Bauhaus-related (or inspired) Futura, dating back to German modernism of 1920s.
   Like Garamond, it has seen multiple digitizations, and I&#39;m familiar with the one bundled with MacOS.</p>
<p>
   I enjoyed using it in presentations - it has a distinct, elegant appearance which comes at no cost for text clarity.
   It was placed on my radar by the manual of the <a href="https://ctan.org/pkg/beamer">Beamer</a> class for LaTeX —
   <em>Futura is, in our opinion, a beautiful font that is very well-suited for presentations. Its thick letters make it robust against scaling, inversion, and low contrast.</em></p>
<p>
   See: <a href="https://en.wikipedia.org/wiki/Futura_(typeface)">Wikipedia</a>.
   Author: Paul Renner (original).
   License: proprietary (?).</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-14" class="outline-2">
<h2 id="headline-14">
Afterword
</h2>
<div id="outline-text-headline-14" class="outline-text-2">
<p>
  I started writing this post when configuring a new computer, and it was supposed to be quick and easy write-up about something that I like.
  But wanting to include author and license information led me down several rabbit holes.
  First, I knew I wanted to include Półtawski&#39;s Antykwa, but I only knew the LaTeX (GUST) version, as Półtawski Nowy came out only two years ago.
  This, together with the story of Garamond, made me realise that traditional fonts often have several digitizations, which can be based on different sets of source materials (metal types, photographs), and done in different software frameworks.
  Then, also the details of Carlito required some jumping across links to find the discussion of its provenance on GitHub.
  Finally, Wikipedia has a nice template for font illustrations, but doesn&#39;t have them all, and each sample is slightly different.
  I ended up creating my own with a <a href="https://gist.github.com/mslw/9cd6b4acee8ceda366a6c10cb5503477">small Python script</a> using svgwrite, and then converting to path and exporting to png in Inkscape (ImageMagick export didn&#39;t preserve ligatures).
  All in all, it was very interesting.</p>
<p>
  The Beamer manual mentioned previously has a nice 10-page chapter on &#34;Guidelines for creating presentations&#34;, with a couple pages dedicated to choosing fonts.
  It also contains this honest advice: <em>There is one popular font that is a bit special: Microsoft’s Comic Sans. (…) Think twice before using this font, but do not let yourself be intimidated.</em>
  The reason why the authors don&#39;t discourage it outright is that it <em>does create the impression of a slide &#34;written by hand,&#34; which gives the presentation a natural look</em>.
  I didn&#39;t include script typefaces in this post because I don&#39;t have favourites, but I&#39;ve used them sometimes for &#34;side-note&#34; pieces of text in presentations (not full slides though).
  There are, naturally, way better options than Comic Sans, such as <a href="https://fonts.google.com/specimen/Comic+Neue">Comic Neue</a> or <a href="https://fonts.google.com/specimen/Nanum+Pen+Script">Naunum Pen script</a>; both OFL-licensed (the latter discovered thanks to my colleague who used it as his main poster font - works very well).</p>
<p>
  As a side note, both <a href="https://docs.fedoraproject.org/en-US/quick-docs/fonts/">Fedora</a> and <a href="https://wiki.debian.org/Fonts">Debian</a> (two distributions I use between personal and work computers) have nice documentation on how to install fonts.</p>
</div>
</div>
<div id="outline-container-headline-15" class="outline-2">
<h2 id="headline-15">
Changelog
</h2>
<div id="outline-text-headline-15" class="outline-text-2">
<p>
  2022-06-26: Added Vollkorn. Added a link to the Python script used to generate font specimens.</p>
</div>
</div>
<div class="footnotes">
<hr class="footnotes-separatator">
<div class="footnote-definitions">
<div class="footnote-definition">
<sup id="footnote-1"><a href="#footnote-reference-1">1</a></sup>
<div class="footnote-body">
<p>Which annoys me for two reasons.
First, the digitization and historical research was supported by the &#34;Digital Culture 2020&#34; program of the Ministry of Culture and National Heritage.
Second, the project homepage says that the font is <em>available for download under an open license</em>.
In my mind, the words &#34;open license&#34; imply freedom to access, use, modify, and share (subject, at most, to requirements that preserve provenance and openness), in line with <a href="https://opendefinition.org/">opendefinition.org</a>, <a href="https://wiki.creativecommons.org/wiki/Open_license">Creative Commons Wiki</a>, or <a href="https://freedomdefined.org/Definition">freedomdefined.org</a>.
Yet, the license PDF distributed with the font (in Polish, the English version lacks the applicable part altogether) makes it clear that this is not the case.</p>
</div>
</div>
<div class="footnote-definition">
<sup id="footnote-2"><a href="#footnote-reference-2">2</a></sup>
<div class="footnote-body">
<p>The publication mentions two other digitizations, Poltawski OM by Felix Tymcik and Polanta Serif by Julia Gonina.
Neither were broadly distributed.</p>
</div>
</div>
<div class="footnote-definition">
<sup id="footnote-3"><a href="#footnote-reference-3">3</a></sup>
<div class="footnote-body">
<p><a href="https://mytolino.de">Tolino</a> is a German brand crated by several book stores, with a reasonably open ecosystem.
They are using Kobo hardware, but with an alternate Android-based operating system.</p>
</div>
</div>
</div>
</div>
]]></content></item><item><title>What makes a good file name</title><link>https://mslw.github.io/posts/2021-12-12-good-file-name/</link><pubDate>Sun, 12 Dec 2021 22:45:00 +0100</pubDate><guid>https://mslw.github.io/posts/2021-12-12-good-file-name/</guid><description>One of the topics included in a research data management workshop with which I am involved is &amp;#34;what is a good file name&amp;#34;. The question may seem trivial, but naming files is an everyday practice with real consequences on data usability that isn&amp;#39;t talked about very often.
When looking for existing recommendations, we found a popular presentation Naming Things by Jenny Bryan, a related presentation Project Structure by Danielle Navarro, and a colelction of File naming best practices from the MIT Libraries.</description><content type="html"><![CDATA[
<p>
One of the topics included in a research data management workshop with
which I am involved is &#34;what is a good file name&#34;. The question may
seem trivial, but naming files is an everyday practice with real
consequences on data usability that isn&#39;t talked about very often.</p>
<p>
When looking for existing recommendations, we found a popular
presentation <a href="http://www2.stat.duke.edu/~rcs46/lectures_2015/01-markdown-git/slides/naming-slides/naming-slides.pdf">Naming Things</a> by Jenny Bryan, a related presentation
<a href="https://slides.djnavarro.net/project-structure/">Project Structure</a> by Danielle Navarro, and a colelction of <a href="https://libraries.mit.edu/data-management/store/organize/">File naming
best practices</a> from the MIT Libraries. It was interesting to see that,
although the three sources agree on core principles, they make
different specific recommendations. So the question &#34;what is a good
file name&#34; is not as trivial as it might first seem. In this post I am
trying to pick apart a few recommendations, trying to better
understand where they might come from and whether I would agree with
them or not.</p>
<p>
If you are interested in the subject, the discussion also spawned an
entertaining and comprehensive appendix to the DataLad Handbook
written by my colleague – <a href="https://handbook.datalad.org/en/latest/intro/filenaming.html">How to name a file: Interoperability
considerations</a>.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
General principles
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>The three sources listed at the beginning agree that the goal of
  file naming is to make life easier when working with files recorded
  a while ago. The three rules they give for file names are best
  summarised as:</p>
<ul>
<li>machine readable,</li>
<li>human readable,</li>
<li>easy to sort and search,</li>
</ul>
<p>and it&#39;s hard not to agree on that.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
Spaces are bad but what about hyphen?
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>Sources also agree that spaces are best avoided. This comes, mainly,
  from command line usage, which is a very popular way of interacting
  with data. In a command line, space is used to separate arguments of
  a command, so a file name (single argument) with spaces needs to be
  put in quotation marks <code class="verbatim">&#34;like this&#34;</code> or written with an escape
  character <code class="verbatim">like\ this</code>, which is plainly annoying. Even bigger
  problems await when a file name needs to be passed between programs,
  and you may find yourself escaping quotation symbols or escape
  characters themselves.</p>
<p>
  A common recommendation, with which I agree, is to replace spaces
  with underscores and hyphens. The two can be combined and have
  different meaning, with underscores separating units of information,
  and hyphens separating words within a unit for better
  readability. For example, <code class="verbatim">sample_green_city-landscape.jpg</code> has
  three units of information: category (sample), color (green) and
  content description (city landscape). Every common programming
  language will have a facility for easily splitting the name into
  three blocks.</p>
<p>
  This can be taken further: the name can be constructed from
  key-value pairs, with hyphens separating key from value, and
  underscores separating pairs. This makes the pattern
  self-explanatory and can be useful if there are many possible units
  of information, but different subsets are used between files. For
  example, the previous name could be rewritten as
  <code class="verbatim">kind-sample_color-green_content-citylandscape.jpg</code>. Again, a
  programming language of your choice will have a key-value based
  representation and an easy way to create it from this name.</p>
<p>
  Interestingly, one of the sources recommended that only underscores
  should be used, and hyphens must be avoided. The reasoning? That
  it&#39;s easy to confuse a hyphen (-) with an n-dash (–, a typographic
  character used, for example, in ranges or numbers) or m-dash (—, a
  typographic character often used to indicate a pause in a
  sentence). I admit, I have fallen prey of a dash in a file name
  once, and then it took me a while to find out why the file name does
  not match. However, pretty much the only way a dash can find its way
  into a file name is when it gets copied from a document editor; the
  keyboard only has a hyphen. In my opinion, the adventages of having
  two word-separating characters far outweigh this risk, and I was
  surprised to see an assertive statement &#34;don&#39;t use hyphens and
  dashes&#34;.</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
Does a date belong in a name?
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>One recommendation that seems pervasive is to start a filename with
  a date, formatted according to ISO 8601,
  e.g. <code class="verbatim">2021-12-10-file-naming.org</code>. It&#39;s hard to deny that <em>if</em> a
  date is used, ISO 8601 is the way to go (as alphabetic sorting
  produces chronological order). However, there is probably too much
  emphasis on including the date at all.</p>
<p>
  If the date is an essential information (e.g. weather data collected
  daily) or the chronology is of particular importance (e.g. meeting
  notes, blog posts), then sure. Other than that? Probably redundant
  in most cases. Arguably, it may even be considered bad practice,
  especially when used to represent changes over time (honestly,
  that&#39;s hardly different than adding &#34;_v1&#34;, &#34;v2&#34;, etc.) – that
  problem is better solved by using actual version control. Perhaps
  some of the drive for including the date comes from the fact that
  creation date may or may not survive file transfer between
  computers. But again, since version version control tools associate
  each change with a date, this problem is also solved.</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
Is numbering helpful?
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<p>Another common recommendation is to include a number at or near the
  beginning: <code class="verbatim">01_this</code> or <code class="verbatim">analysis02_that</code>.  As with dates, one thing
  is for sure: if you are including numbers and there is a chance of
  going beyond 10, use zero padding (because alphabetic sorting is
  done by single characters, <code class="verbatim">10_x</code> will land before <code class="verbatim">2_x</code> but not
  <code class="verbatim">02_x</code>).  But I&#39;m not certain that the recommendation is universal.
  In some cases, adding numbers will certainly be easy and look nice.
  In some, however, you won&#39;t know the definitive order in advance,
  and if somethings needs to be inserted in the middle, you will have
  to sequentially rename all subsequent files.  In these cases, at
  least for code, an alternative strategy would be to record the
  correct order in a free-form description (readme file) or some sort
  of a master script (e.g. makefile).  And again, using version
  control provides an additional perspective.  If the outcome of
  including numerals is <code class="verbatim">02_first-attempt</code> and
  <code class="verbatim">04_an-improved-approach</code> then it really could just be
  <code class="verbatim">the-analysis</code> with the evolution stored in version control history.</p>
</div>
</div>
]]></content></item><item><title>The search for a perfect note taking app</title><link>https://mslw.github.io/posts/2021-11-01-note-taking-apps/</link><pubDate>Mon, 01 Nov 2021 17:50:00 +0100</pubDate><guid>https://mslw.github.io/posts/2021-11-01-note-taking-apps/</guid><description>A note taking app is essential: meeting notes, quick how-tos, sketches of ideas call for a simple and convenient tool. While note taking seems like a straightforward task, there is a surprising variety of programs, and it&amp;#39;s difficult to find a perfect one.
So far I&amp;#39;ve had good experiences with Bear, Joplin, and Emacs with Org Mode. However, none of them came close enough to perfection for me to stick with it and forget about others.</description><content type="html"><![CDATA[
<p>
A note taking app is essential: meeting notes, quick how-tos, sketches of ideas call for a simple and convenient tool.
While note taking seems like a straightforward task, there is a surprising variety of programs, and it&#39;s difficult to find a perfect one.</p>
<p>
So far I&#39;ve had good experiences with <a href="https://bear.app/">Bear</a>, <a href="https://joplinapp.org/">Joplin</a>, and <a href="https://www.gnu.org/software/emacs/">Emacs</a> with <a href="https://orgmode.org/">Org Mode</a>.
However, none of them came close enough to perfection for me to stick with it and forget about others.
In this post, I explain what I like and do not like about each of them.</p>
<p>
As a side note, why not <a href="https://evernote.com">Evernote</a>, ome of the most popular apps out there? I tried, but it did not click for me at all.
Two primary reasons: it felt like it tried to do too many things at once (for notes, I value simplicity), and it is necessarily tied to its own hosting service (paid or not).</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
What I&#39;m looking for
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<ul>
<li>Simple, inobtrusive, elegant interface, which allows focusing on the content.</li>
<li>Basic formatting support (including monospaced code fragments).
Ideally done through a markup language (Markdown or similar), so things like emphasis, lists, URLs and code snippets can be entered using keyboard only.</li>
<li>Possibility of synchronisation between devices, so the notes can exist independently from a machine where they were typed.</li>
<li>Support for independent hosting providers, so registering yet another account with the app creator is not necessary (distinction between app and service).</li>
<li>Raw text storage (or at least export), so it&#39;s easy to read notes without the app or move them to another one.</li>
<li>Export capabilities, so it&#39;s easy to generate e.g. a PDF when needed.</li>
<li>Useful search ability, so it&#39;s easy to find an old note.</li>
</ul>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
Bear
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>
  Website: <a href="https://bear.app/">https://bear.app/</a></p>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Pros
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<ul>
<li>The most elegant interface I have encountered so far.
From fonts and colours to display layout, everything seems well thought out.
The sidebars can be hidden with a simple shortcut, leaving a perfectly simple, distraction-free slate of text.
The text is width-limited on a page for optimal readability.
Header levels and bullet points are subtly displayed in the left margin.</li>
<li>Editing is markdown-based.
Formatting is applied live in the same window, and visual presentation is clever (eg. most formatting symbols are kept gently blended with the background).</li>
<li>Provides ready-made themes, including classics such as <a href="https://ethanschoonover.com/solarized/">Solarized</a>, <a href="https://draculatheme.com/">Dracula</a> and <a href="https://www.nordtheme.com/">Nord</a>.</li>
<li>Organises notes by tags, replacing the more common structure of notebooks.</li>
<li>Exported PDFs look nice, supports many different formats.</li>
<li>Being MacOS native, uses iCloud in the background for storage, which eliminates the need for additional hosting.</li>
</ul>
</div>
</div>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
Cons
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<ul>
<li>MacOS native, won&#39;t work outside Apple ecosystem.</li>
<li>Fully functional version is paid in a subscription model, $15 per year.
There is a free version, which lacks some of the features listed above.</li>
</ul>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-5" class="outline-2">
<h2 id="headline-5">
Joplin
</h2>
<div id="outline-text-headline-5" class="outline-text-2">
<p>
  Website: <a href="https://joplinapp.org/">https://joplinapp.org/</a></p>
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
Pros
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<ul>
<li>Free and open source, most of the codebase is MIT-licensed.</li>
<li>Editing is markdown-based.
Unlike Bear, the default view has two panels, one with markdown (with syntax highlighting), the other with fully rendered text.</li>
<li>Can synchronise with Dropbox, OneDrive, NextCloud, generic WebDAV and others.
Provides optional encryption for transport and storage.</li>
<li>Provides ready-made themes (also including Solarized, Dracula, and Nord) and the ability to select fonts.</li>
<li>Exports to PDF and others (I haven&#39;t tested export though).</li>
<li>Available across platforms, including mobile.</li>
</ul>
</div>
</div>
<div id="outline-container-headline-7" class="outline-3">
<h3 id="headline-7">
Cons
</h3>
<div id="outline-text-headline-7" class="outline-text-3">
<ul>
<li>The two-panel markdown view eats up space.
With side panels shown, the view is cramped, and with them hidden it still requires a sizeable part of the screen.
It feels like it has been designed with fullscreen use in mind.</li>
<li>The UI is busier then Bear&#39;s.</li>
<li>Looks like it tries to be a replacement for Evernote.</li>
<li>Uses AppImage on Linux (there are no official packages, snaps, or flatpaks) and the best way to install is through their own install script.</li>
<li>Bug fixes may take time.
Recently, changes in Let&#39;s Encrypt certificates <a href="https://discourse.joplinapp.org/t/letsencrypt-root-ca-certificate-expiration/20635">required an update to an underlying library</a> which largely disabled synchronisation for a few weeks.
However, changes were communicated quickly, everything is back to normal, and such breaking changes are rare occurences anyway.</li>
</ul>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-8" class="outline-2">
<h2 id="headline-8">
Emacs + Org
</h2>
<div id="outline-text-headline-8" class="outline-text-2">
<p>
  Website: <a href="https://orgmode.org/">https://orgmode.org/</a></p>
<div id="outline-container-headline-9" class="outline-3">
<h3 id="headline-9">
Pros
</h3>
<div id="outline-text-headline-9" class="outline-text-3">
<ul>
<li>The most ascetic of them all.</li>
<li>Uses org syntax, natively supported in emacs, which works quite nice for notes.
A case <a href="https://karl-voit.at/2017/09/23/orgmode-as-markup-only/">can be made</a> for org over markdown, at least from some angles.</li>
<li>Org files are text files which you can organise and manage the way you want to.
While emacs has a lot of native functionality for them, they are not emacs-specific and can be written in any editor.</li>
<li>Everything is done with keyboard only.</li>
<li>Synchronisation with any hosting solution (including Nextcloud) is easy to achieve using <a href="https://rclone.org/">rclone</a>, an external command-line tool.</li>
</ul>
</div>
</div>
<div id="outline-container-headline-10" class="outline-3">
<h3 id="headline-10">
Cons
</h3>
<div id="outline-text-headline-10" class="outline-text-3">
<ul>
<li>Since emacs is a world on its own, org + emacs probably won&#39;t appeal to people who aren&#39;t using emacs already.</li>
<li>Emacs has a lot of org-specific behaviour.
While this may be a good thing, it also means that there is a lot to memorise.</li>
<li>There is no standard way for managing note collections.
Some people on the Internet suggest having one huge file with collapsible headings.
I prefer to have one note in one file, but it makes searching harder.
There may be some extensions for managing many files, but for now I rely on a date-slug names and directory listing.</li>
<li>Synchronisation is not built in, so it requires additional software and is an action on its own.</li>
</ul>
</div>
</div>
</div>
</div>
]]></content></item><item><title>Combining nilearn plots</title><link>https://mslw.github.io/posts/2021-06-01-combining-nilearn-plots/</link><pubDate>Tue, 01 Jun 2021 23:45:00 +0200</pubDate><guid>https://mslw.github.io/posts/2021-06-01-combining-nilearn-plots/</guid><description>Visual presentation of brain results should be clear for the viewer, but the exact kind of a plot will depend on the result presented (just a single, super-important cluster? a scattering of voxels? widespread network?). Still, preferences vary, and finding the right way to present a given result may feel almost like finding one&amp;#39;s own artistic voice.
For the last given example (widespread activation of multiple brain regions), I have grown to prefer a montage of slices, accompanied by a glass-brain showing selected cuts.</description><content type="html"><![CDATA[
<p>
Visual presentation of brain results should be clear for the viewer, but the exact kind of a plot will depend on the result presented (just a single, super-important cluster? a scattering of voxels? widespread network?). Still, preferences vary, and finding the right way to present a given result may feel almost like finding one&#39;s own artistic voice.</p>
<p>
For the last given example (widespread activation of multiple brain regions), I have grown to prefer a montage of slices, accompanied by a glass-brain showing selected cuts.</p>
<p>
Below I will show how to do it using the plotting sub-module from <a href="https://nilearn.github.io/index.html">nilearn</a>. Combining several plots efficiently wasn&#39;t difficult to figure out thanks to nilearn&#39;s documentation, but it required a tiny bit of hackery. Also, I didn&#39;t find examples which cover combined plots directly, so here&#39;s hoping that I can fill a gap (and perhaps encourage you to use nilearn&#39;s plotting functions).</p>
<p>
My goal is to create, with a block of code, a complete figure which won&#39;t need editing (such as merging or scaling) in external programs. This way, any changes made between the initial and final version (e.g. change of slice coordinates) will be simple to make and won&#39;t consume much time - a huge advantage of creating figures programatically.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Nilearn plotting: basic elements
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>
  For fMRI activations, nilearn provides the <code>plot_stat_map</code> function (<a href="https://nilearn.github.io/modules/generated/nilearn.plotting.plot_stat_map.html">docs</a>). By default, it shows 3 cuts (axial, coronal, and saggital); several other display modes can be used. When a single direction of cuts is used, multiple slices are arranged in one row; for my desired view I will be aiming for two such rows.</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="n">plotting</span><span class="o">.</span><span class="n">plot_stat_map</span><span class="p">(</span><span class="n">stat_map</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mf">3.21</span><span class="p">,</span> <span class="n">display_mode</span><span class="o">=</span><span class="s1">&#39;z&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	   <span class="n">cut_coords</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">45</span><span class="p">])</span></span></span></code></pre></div>
</div>
<figure>
<img src="/img/combining-nilearn-plots/fig1.png" alt="/img/combining-nilearn-plots/fig1.png" title="/img/combining-nilearn-plots/fig1.png" /><figcaption>
Example output of plot_stat_map showing four axial slices.
</figcaption>
</figure>
<p>
  The glass brain can be plotted with the <code>plot_glass_brain</code> function (<a href="https://nilearn.github.io/modules/generated/nilearn.plotting.plot_glass_brain.html">docs</a>). Conveniently, the plot axes behave as expected, so in a basic version you can simply call <code>axhline</code> from pyplot without any hassle, and give it millimeter coordinates (as a side note, you can set the first argument to <code>None</code> to plot just the glass brain, without any blobs).</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="n">plotting</span><span class="o">.</span><span class="n">plot_glass_brain</span><span class="p">(</span><span class="n">stat_map</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mf">3.21</span><span class="p">,</span> <span class="n">display_mode</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="o">-</span><span class="mi">15</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="mi">45</span><span class="p">)</span></span></span></code></pre></div>
</div>
<figure>
<img src="/img/combining-nilearn-plots/fig2.png" alt="/img/combining-nilearn-plots/fig2.png" title="/img/combining-nilearn-plots/fig2.png" /><figcaption>
Example output of plot_glass_brain with only the sagittal display, and horizontal lines added.
</figcaption>
</figure>
<p>
  Crucially, both functions accept the <code>axes</code> optional parameter (from the docs):</p>
<blockquote>
<p><code>axes</code> matplotlib axes or 4 tuple of float: (xmin, ymin, width, height), optional</p>
<p>
  The axes, or the coordinates, in matplotlib figure space, of the axes used to display the plot. If None, the complete figure is used.</p>
</blockquote>
<p>
  I will use this to build the combined figure. Using coordinates rather than matplotlib axes as input is more practical and allows more control over the figure (I tried creating an uneven subplot grid, but ended up with oddly large margins).</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
Building the figure, beginning to end
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>
  These are the packages which I&#39;ll be using. </p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="kn">from</span> <span class="nn">nilearn</span> <span class="kn">import</span> <span class="n">datasets</span><span class="p">,</span> <span class="n">image</span><span class="p">,</span> <span class="n">plotting</span>
</span></span><span class="line"><span class="cl">  <span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>  <span class="c1"># basic plotting functions</span>
</span></span><span class="line"><span class="cl">  <span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">rc</span>             <span class="c1"># additional styling</span>
</span></span><span class="line"><span class="cl">  <span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>                    <span class="c1"># for working with image data</span>
</span></span><span class="line"><span class="cl">  <span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>                 <span class="c1"># nice colormaps</span></span></span></code></pre></div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Data loading and preparation
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>
  When choosing the data used for plotting, I will follow examples from nilearn and use the &#34;neurovault motor task&#34; from <code>nilearn.datasets</code> (when working with my own data, I would just load my own statistical map).</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="n">motor_images</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">fetch_neurovault_motor_task</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">img_path</span> <span class="o">=</span> <span class="n">motor_images</span><span class="o">.</span><span class="n">images</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># or use path to own data</span>
</span></span><span class="line"><span class="cl">  <span class="n">orig_img</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">load_img</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span></span></span></code></pre></div>
</div>
<p>
  Since usually I am interested only in the positive contrast values, I will also clip the negative values from the image (for this particular contrast, <em>left vs right button press</em>, this hardly makes any sense, but it would be desired in many cases). This is also a simple way to guarantee that nilearn will include just the positive values on the colorbars.</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="n">stat_map</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">new_img_like</span><span class="p">(</span><span class="n">orig_img</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">clip</span><span class="p">(</span><span class="n">orig_img</span><span class="o">.</span><span class="n">get_fdata</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">None</span><span class="p">))</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
Some more preparation: colormap &amp; font
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<p>
    Before starting with the actual figure, let&#39;s prepare a colormap that is different from the default. I like the <em>icefire</em> palette from seaborn - it is perceptually uniform, and I think it looks better than nilearn&#39;s default <em>cold_hot</em> (you can read more in the <a href="http://seaborn.pydata.org/tutorial/color_palettes.html">Choosing color palettes</a> seaborn tutorial).</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="n">my_cm</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">color_palette</span><span class="p">(</span><span class="s2">&#34;icefire&#34;</span><span class="p">,</span> <span class="n">as_cmap</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span></span></span></code></pre></div>
</div>
<p>
  What&#39;s more, while <code>plot_stat_map</code> always uses <em>cold_hot</em> as default, <code>plot_glass_brain</code> has defaults depending on the background: <em>cold_hot</em> if black, <em>cold_white_hot</em> otherwise. While there is a logic to that, especially when the glass brain is on its own (high values are bright on black background and dark on white), if I kept the default colormaps and a white background for both plot types, I would end up with two distinct color schemes within the figure. When specifying a colormap explicitly, I can keep a single color bar (value ranges should match too).</p>
<p>
  I will also specify font size using the <code>matplotlib.rc</code> convenience function (which can also be used to set other parameters, eg. font family, by adding more keyword arguments; see <a href="https://matplotlib.org/stable/tutorials/introductory/customizing.html">Customizing Matplotlib</a> for details).</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="n">rc</span><span class="p">(</span><span class="s1">&#39;font&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span></span></span></code></pre></div>
</div>
<p>
  Size 8 should be fine. Strangely enough, this will affect the colorbars, but not the labels next to slices; those will be changed separately.</p>
</div>
</div>
<div id="outline-container-headline-5" class="outline-3">
<h3 id="headline-5">
Creating an empty figure
</h3>
<div id="outline-text-headline-5" class="outline-text-3">
<p>
  At this point, it is good to start thinking about the figure as an empty canvas, which we are going to fill with the brain images. Having to specify the figure size in inches rather than pixels may seem counterintuitive when we are looking at a computer screen, but choosing the right size will guarantee that the output will look good in print (e.g. text size settings will match those on the page).</p>
<p>
  A4 paper is 210 × 297 mm or 8.3 × 11.7 in. For a full width figure, Elsevier <a href="https://www.elsevier.com/authors/policies-and-guidelines/artwork-and-media-instructions/artwork-sizing">recommends</a> going with 190 mm (7.48 in) and elife <a href="https://reviewer.elifesciences.org/author-guide/revised">recommends</a> 200 mm (7.87 in). Both recommend using a resolution of at least 300 dpi (so a full width column by Elsevier standards will end up 2244 pixels wide).</p>
<p>
  For this example, I am choosing full page width. For height, I am going to use a bit less than a third of the page. Within this space, I want to include two rows, one with three three brain slices, and one with four (the brains will come out quite large - probably even six slices per row should be perfectly legible), and place a single glass brain on the side, in the row with less slices. Don&#39;t be afraid to use a pen and (gridded) paper when planning your figure.</p>
<p>
  Having made the decision, I can create the figure with the specified size:</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mf">7.87</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
Plotting: stat map
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<p>
  It&#39;s time to start the actual plotting. Let&#39;s start with the lower part of the picture, showing three axial slices (explanations below).</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">sm_lower</span> <span class="o">=</span> <span class="n">plotting</span><span class="o">.</span><span class="n">plot_stat_map</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">stat_map_img</span> <span class="o">=</span> <span class="n">stat_map</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">threshold</span> <span class="o">=</span> <span class="mf">3.21</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">display_mode</span> <span class="o">=</span> <span class="s1">&#39;z&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">cut_coords</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">annotate</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">figure</span> <span class="o">=</span> <span class="n">fig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">axes</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span> <span class="mf">0.48</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmap</span> <span class="o">=</span> <span class="n">my_cm</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">colorbar</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sm_lower</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">left_right</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">positions</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span></span></span></code></pre></div>
</div>
<p>
  The first argument is the statistical map image to display, and the second is the threshold. Next, <code>display_mode = &#39;z&#39;</code> means that axial slices will be shown, and <code>cut_coords = [-20, -15, -10]</code> specifies which. I am setting <code>annotate = False</code> (meaning no labels with position and left / right) because this function does not accept arguments for annotation font size (and it doesn&#39;t follow the general rc setting); instead, I add annotations afterwards, with a separate function call. With <code>figure = fig</code>, I am telling the function to draw onto the figure created previously. The <code>axes = (xmin, ymin, width, height)</code> is specified in the figure space (1 = entire width / height), allowing us to do this independently from the actual size in inches. For this part, I want to start in the lower left corner (0, 0), use three-quarters of the width (0.75) and almost half the height (0.48, because using all 0.5 made things look overcrowded). I am explicit with the <code>cmap</code> I use, and I don&#39;t want to show the <code>colorbar</code> here; I will put one next to the glass brain later on.</p>
<p>
  The same goes for the upper part of the figure, although this time I am starting a tiny bit above the midline, and using the whole width with <code>axes = (0, 0.51, 1, 0.48)</code> to show four slices:</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">sm_upper</span> <span class="o">=</span> <span class="n">plotting</span><span class="o">.</span><span class="n">plot_stat_map</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">stat_map_img</span> <span class="o">=</span> <span class="n">stat_map</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">threshold</span> <span class="o">=</span> <span class="mf">3.21</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">display_mode</span> <span class="o">=</span> <span class="s1">&#39;z&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">cut_coords</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">60</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">annotate</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">figure</span> <span class="o">=</span> <span class="n">fig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">axes</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.51</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">0.48</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmap</span> <span class="o">=</span> <span class="n">my_cm</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">colorbar</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sm_upper</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">left_right</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">positions</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-7" class="outline-3">
<h3 id="headline-7">
Plotting: glass brain
</h3>
<div id="outline-text-headline-7" class="outline-text-3">
<p>
  Now comes the time for the glass brain. Since I used axial slices before, I will mark them on the sagittal view: <code>display_mode=&#39;x&#39;</code>. I will put the glass brain on the lower right: <code>axes=(0.8, 0, 0.2, 0.48)</code> (proportions for the glass brain are slightly different, and 0.2 width seems just right). Again, I am explicit with <code>cmap</code>, but this time I do want to show the <code>colorbar</code>.</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">gb</span> <span class="o">=</span> <span class="n">plotting</span><span class="o">.</span><span class="n">plot_glass_brain</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">stat_map</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">threshold</span><span class="o">=</span><span class="mf">3.21</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">display_mode</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">figure</span> <span class="o">=</span> <span class="n">fig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">axes</span><span class="o">=</span><span class="p">(</span><span class="mf">0.8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.48</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">cmap</span> <span class="o">=</span> <span class="n">my_cm</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">colorbar</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></div>
</div>
<p>
  Note that because we used the same colormap across all three figure parts, and <code>plot_stat_map</code> scales itself to the maximum of the entire image regardless of selected slices, this colorbar will be valid for the entire figure. If we were showing positive and negative values, we would also gave to set <code>plot_abs=False</code> for the glass brain. To make sure that the scales match, you can try enabling the colorbar everywhere before making the final version.</p>
<p>
  And here comes the last tricky part: marking the slices. When placed onto a figure, the glass brain creates its own set of <code>GlassBrainAxes</code> (three if all slices are shown; only one in our case). This means we cannot work directly with the object we created, <code>gb</code>. Before adding lines, we need to unpack it a little to get to the relevant <code>Axes</code> object: <code>gb.axes[&lt;slice&gt;].ax</code> is what we want. We will get the start and end points with <code>get_object_bounds()</code> (we could also know the MNI brain size by heart and just hardcode the values) and draw all lines at once with <code>hlines</code>.</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">bounds</span> <span class="o">=</span> <span class="n">gb</span><span class="o">.</span><span class="n">axes</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">get_object_bounds</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">gb</span><span class="o">.</span><span class="n">axes</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">ax</span><span class="o">.</span><span class="n">hlines</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">60</span><span class="p">],</span> 
</span></span><span class="line"><span class="cl">    <span class="n">xmin</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">xmax</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">)</span></span></span></code></pre></div>
</div>
<p>
  One final note: in practice, I would store the cut coordinates in a list and refer to it both when plotting brains and drawing lines to minimze errors. However, for demonstration I decided to be explicit.</p>
</div>
</div>
<div id="outline-container-headline-8" class="outline-3">
<h3 id="headline-8">
Saving
</h3>
<div id="outline-text-headline-8" class="outline-text-3">
<p>
  And finally comes the last part: saving. We can do this with one siple call, and we can specify either png or pdf extension to determine the file format.</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s1">&#39;/my/path/figure.png&#39;</span><span class="p">)</span></span></span></code></pre></div>
</div>
<p>
  This is the result:</p>
<figure>
<img src="/img/combining-nilearn-plots/combined_figure.png" alt="/img/combining-nilearn-plots/combined_figure.png" title="/img/combining-nilearn-plots/combined_figure.png" /><figcaption>
A combined figure
</figcaption>
</figure>
</div>
</div>
</div>
</div>
]]></content></item><item><title>Matlab table &amp; string</title><link>https://mslw.github.io/posts/2021-05-05-matlab-table-string/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://mslw.github.io/posts/2021-05-05-matlab-table-string/</guid><description>In this post I am taking a closer look at tables and strings in matlab.
Matlab continuously evolves, and the two data types are fairly recent additions to the language: table was added in R2013b and string in R2016b. Table arrays store tabular data and can make its handling (sorting, filtering, joining etc.) much more convenient than &amp;ldquo;classical&amp;rdquo; cell arrays. In a way, they are similar to dataframes known from R or python / pandas, although more basic.</description><content type="html"><![CDATA[<p>In this post I am taking a closer look at tables and strings in matlab.</p>
<p>Matlab continuously evolves, and the two data types are fairly recent additions to the language: <a href="https://www.mathworks.com/help/matlab/ref/table.html">table</a> was added in R2013b and <a href="https://www.mathworks.com/help/matlab/ref/string.html">string</a> in R2016b. Table arrays store tabular data and can make its handling (sorting, filtering, joining etc.) much more convenient than &ldquo;classical&rdquo; cell arrays. In a way, they are similar to dataframes known from R or python / pandas, although more basic. String arrays are a proper string type, and in my opinion they are much more workable then their predecessors, character arrays and cellstrings.</p>
<p>To demonstrate how useful they can be together, I will show an example modelled after preparing an input for SPM batch (specifically, second level two sample t-test design). If you work in neuroimaging, you&rsquo;ll probably be familiar with SPM, but if not, you will be able to follow along just as well.</p>
<h1 id="problem-statement">Problem statement</h1>
<p>What we have is a tab-separated file <code>participants.tsv</code> with a list of subjects (in accordance with the <a href="https://bids-specification.readthedocs.io/en/stable/03-modality-agnostic-files.html#participants-file">BIDS specification</a>):</p>
<pre tabindex="0"><code>participant_id age group
sub-01         34  read
sub-02         12  write
sub-03         33  read
</code></pre><p>We also have a set of intermediate files (first level output), which we organised in the following way (this time according to our whim, rather than any standard):</p>
<pre tabindex="0"><code>/work/sub-01/task-motor/con_0001.nii
/work/sub-01/task-nback/con_0001.nii
/work/sub-02/task-motor/con_0001.nii
/work/sub-02/task-nback/con_0001.nii
</code></pre><p>What we want to get is two lists of files for the motor task: one for the read group, and one for the write group:</p>
<pre tabindex="0"><code>group1 = {
	/work/sub-01/task-motor/con_0001.nii;
	/work/sub-03/task-motor/con_0001.nii;
	...
	}
group2 = {
	/work/sub-02/task-motor/con_0001.nii;
	...
	}
</code></pre><h1 id="solution">Solution</h1>
<p>Let&rsquo;s start by reading the participant file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-matlab" data-lang="matlab"><span class="line"><span class="cl"><span class="n">participants</span> <span class="p">=</span> <span class="n">readtable</span><span class="p">(</span><span class="s">&#39;/path/to/participants.tsv&#39;</span><span class="p">,</span> <span class="c">...</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#39;FileType&#39;</span><span class="p">,</span> <span class="s">&#39;text&#39;</span><span class="p">,</span> <span class="s">&#39;Delimiter&#39;</span><span class="p">,</span> <span class="s">&#39;\t&#39;</span><span class="p">,</span> <span class="s">&#39;TextType&#39;</span><span class="p">,</span> <span class="s">&#39;string&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>Unfortunately, <code>readtable</code> recognizes <code>.txt</code>, <code>.dat</code> or <code>.csv</code> extensions, but not <code>.tsv</code>, so we have to specify both <code>FileType</code> and <code>Delimiter</code> (either <code>\t</code> or <code>tab</code> will work) in addition to the obligatory file name. Additionally, we use <code>TextType</code> to import text data as string arrays, rather than character vectors. This produces the following:</p>
<pre tabindex="0"><code>participants =

  3×3 table

    participant_id    age     group 
    ______________    ___    _______

       &#34;sub-01&#34;       34     &#34;read&#34; 
       &#34;sub-02&#34;       12     &#34;write&#34;
       &#34;sub-03&#34;       33     &#34;read&#34; 
</code></pre><p>Next, let&rsquo;s add another column with paths to the con files:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-matlab" data-lang="matlab"><span class="line"><span class="cl"><span class="n">participants</span><span class="p">.</span><span class="n">con_files</span> <span class="p">=</span> <span class="n">fullfile</span><span class="p">(</span><span class="c">...</span>
</span></span><span class="line"><span class="cl">	&#34;<span class="o">/</span><span class="n">work</span>&#34;<span class="p">,</span> <span class="n">participants</span><span class="p">.</span><span class="n">participant_id</span><span class="p">,</span> &#34;<span class="n">task</span><span class="o">-</span><span class="n">motor</span>&#34;<span class="p">,</span> &#34;<span class="n">con_0001</span><span class="p">.</span><span class="n">nii</span>&#34;<span class="p">)</span>
</span></span></code></pre></div><p>The <code>fullfile</code> function joins its arguments by adding a path separator (<code>/</code> or <code>\</code>, depending on system). One of the inputs we gave, <code>particiants.participant_id</code> is a string array (with as many rows as there are subjects), and consequently the output will be a string array of the same shape. Adding a column is as simple as retrieving one, and can be done by using a dot notation with a new name. Convenient. This is what the table looks as a result:</p>
<pre tabindex="0"><code>participants =

  3×4 table

    participant_id    age     group                   con_files               
    ______________    ___    _______    ______________________________________

       &#34;sub-01&#34;       34     &#34;read&#34;     &#34;/work/sub-01/task-motor/con_0001.nii&#34;
       &#34;sub-02&#34;       12     &#34;write&#34;    &#34;/work/sub-02/task-motor/con_0001.nii&#34;
       &#34;sub-03&#34;       33     &#34;read&#34;     &#34;/work/sub-03/task-motor/con_0001.nii&#34;
</code></pre><p>We can next filter the table for each group in turn.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-matlab" data-lang="matlab"><span class="line"><span class="cl"><span class="n">read_con</span> <span class="p">=</span> <span class="n">participants</span><span class="p">{</span><span class="n">participants</span><span class="p">.</span><span class="n">group</span> <span class="o">==</span> &#34;<span class="n">read</span>&#34;<span class="p">,</span> &#34;<span class="n">con_files</span>&#34;<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">write_con</span> <span class="p">=</span> <span class="n">participants</span><span class="p">{</span><span class="n">participants</span><span class="p">.</span><span class="n">group</span> <span class="o">==</span> &#34;<span class="n">write</span>&#34;<span class="p">,</span> &#34;<span class="n">con_files</span>&#34;<span class="p">}</span>
</span></span></code></pre></div><p>Here, we used brace indexing to get a subset of rows (since the group column is a string array, we could use <code>==</code> to obtain a logical array of a matching shape for logical indexing) and a single column (by giving its name). In a typical matlab fashion, using round brackets would keep the type of the indexed object and return a table with selected rows and columns, while the curly brackets used above return column content<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> (in this case, a string array). This produces:</p>
<pre tabindex="0"><code>read_con = 

  2×1 string array

    &#34;/work/sub-01/task-motor/con_0001.nii&#34;
    &#34;/work/sub-03/task-motor/con_0001.nii&#34;


write_con = 

    &#34;/work/sub-02/task-motor/con_0001.nii&#34;
</code></pre><p>Finally, since SPM batch requires cellstrings rather than string arrays, we can do a simple conversion:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-matlab" data-lang="matlab"><span class="line"><span class="cl"><span class="n">group1</span> <span class="p">=</span> <span class="n">cellstr</span><span class="p">(</span><span class="n">read_con</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">group2</span> <span class="p">=</span> <span class="n">cellstr</span><span class="p">(</span><span class="n">write_con</span><span class="p">)</span>
</span></span></code></pre></div><pre tabindex="0"><code>group1 =

  2×1 cell array

    {&#39;/work/sub-01/task-motor/con_0001.nii&#39;}
    {&#39;/work/sub-03/task-motor/con_0001.nii&#39;}


group2 =

  1×1 cell array

    {&#39;/work/sub-02/task-motor/con_0001.nii&#39;}
</code></pre><h1 id="further-comments">Further comments</h1>
<p>Naturally, the example above was fairly basic, and there is more that can be done with strings and tables. Here are some things that I found particularly useful.</p>
<p>You can join string arrays using <code>+</code> (eg. you could use <code>&quot;sub-&quot; + participants.participant_id</code> if the &ldquo;sub-&rdquo; prefix was missing). If you are a fan of <code>sprintf</code>, you can use <a href="https://www.mathworks.com/help/matlab/ref/compose.html">compose</a> as its &ldquo;vectorised&rdquo; alternative (eg. <code>compose(&quot;sub-%s&quot;, participants.participant_id)</code>) for a similar effect. Should you wish to replace part of the string, you can use things like <a href="https://www.mathworks.com/help/matlab/ref/replace.html">replace</a>, eg. <code>replace(participants.participant_id, &quot;sub-&quot;, &quot;subject-&quot;)</code>. For filtering, you might want to use <a href="https://www.mathworks.com/help/matlab/ref/startswith.html">startsWith</a> and the like.</p>
<p>For tables, in addition to the regular <code>size</code> function there are intuitive <code>height</code> and <code>width</code> functions. If you have another table (perhaps with behavioural scores) with the same participant IDs but different ordering, you can join them using <a href="https://www.mathworks.com/help/matlab/ref/table.join.html">join</a>. And finally, if you need to sort a table first by one column, and then by another (breaking ties), you can do so using <a href="https://www.mathworks.com/help/matlab/ref/double.sortrows.html">sortrows</a>, as in <code>sortrows(participants, {'group', 'age'})</code> (which also allows you to specify ascending or descending order independently).</p>
<h1 id="footnotes">Footnotes</h1>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Strictly speaking, curly brackets return an array concatenated from the content of selected rows and columns.  a single-column example I prefer thinking of it simply as column content. You can read more about table indexing in the docs: <a href="https://www.mathworks.com/help/matlab/matlab_prog/access-data-in-a-table.html">Access Data in Tables</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content></item><item><title>Giving in to pyenv</title><link>https://mslw.github.io/posts/2021-03-19-giving-in-to-pyenv/</link><pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate><guid>https://mslw.github.io/posts/2021-03-19-giving-in-to-pyenv/</guid><description>There are several ways of installing and managing python on macOS, and in this post I am taking a closer look at pyenv. The write-up is divided into two segments. In the first (which I called &amp;ldquo;life story&amp;rdquo; during writing) I explain why I was avoiding pyenv for a long time and what caused me to give in. The second is technical and provides a short reference for creating and using my current setup.</description><content type="html"><![CDATA[<p>There are several ways of installing and managing python on macOS, and in this post I am taking a closer look at pyenv. The write-up is divided into two segments. In the first (which I called &ldquo;life story&rdquo; during writing) I explain why I was avoiding pyenv for a long time and what caused me to give in. The second is technical and provides a short reference for creating and using my current setup.</p>
<p>There are, obviously, many blog posts about using pyenv, including ones from <a href="https://realpython.com/intro-to-pyenv/">Real Python</a>, <a href="https://towardsdatascience.com/managing-virtual-environment-with-pyenv-ae6f3fb835f8">Towards Data Science</a> or the one I liked a lot from <a href="https://raycent.medium.com/managing-python-on-macos-the-clean-way-7673cab874f6">Raycent</a>. However, most of what I found didn&rsquo;t cover my use case entirely, so here is a compilation of useful tips (which I wish I had known earlier).</p>
<h2 id="introduction">Introduction</h2>
<h3 id="what-i-used-before">What I used before</h3>
<p>For a very long time I have been using <a href="https://brew.sh/">homebrew</a> (&ldquo;the missing package manager for macOS&rdquo;) to take care of my python installation. I also use homebrew to install other programs, so doing <code>brew install python3</code> and, if needed <code>brew update python3</code> were nice, easy and natural.</p>
<p>Another key element was <a href="https://virtualenv.pypa.io/en/stable/">virtualenv</a> (&ldquo;a tool to create isolated python environments&rdquo;). Install python with homebrew, create per-project virtual environments with virtualenv, have a relatively useful set of packages in the global installation and be happy. No need for extensions, not even the popular <a href="https://pypi.org/project/virtualenvwrapper/">virtualenvwrapper</a>. This has served me for quite a while.</p>
<h3 id="the-turning-point">The turning point</h3>
<p>While homebrew-installed python is easy to update, it is perhaps a little bit too easy: sometimes, I would trigger an update when installing or updating some other program. What&rsquo;s more, the default behaviour of homebrew is to perform cleanup, that is to remove old versions of a program, after installing a new one. This is all well and good in most cases (avoids eating up disk space), but not necessarily with python.</p>
<p>The problem is that virtualenv does not create a full copy of a python installation; instead, it relies on the existing one (at least by default, and I am not aware of an alternative behaviour). As a result, upgrading python through homebrew will break links to the python used by a given virtual environment. And aside from the issue of breaking existing environments, if an older version of python happens to be needed to build one, then it somehow needs to be installed in the first place.</p>
<p>So from time to time I had a bad day, because an update broke my python. In most cases, however, I could rebuild any environment (albeit with the new version of python) simply by calling <code>virtualenv path/to/the/env</code> and running <code>pip install -r requirements.txt</code> inside. After all, there isn&rsquo;t that much difference between, say, 3.7 and 3.8 (and it&rsquo;s always nice to have shiny new things, like the <a href="https://www.python.org/dev/peps/pep-0572/#abstract">walrus operator</a>).</p>
<p>However, some changes are game breaking. As of the day I started drafting this blog post, one of my favourite tools, <a href="https://github.com/miykael/atlasreader">atlasreader</a> (which generates coordinate tables and plots for brain images), would not work on python versions above 3.7. I think it must have been and issue in some of its dependencies, but I didn&rsquo;t investigate further (as a sidenote, I set this draft aside for a long while, and in the meantime things got back to normal: as of day of publishing, atlasreader works fine on python 3.9).</p>
<p>And this was a story of how I ended up with python 3.9 while needing 3.7.</p>
<h3 id="assumptions">Assumptions</h3>
<p>The recommendations below will be most useful for people who, like me:</p>
<ol>
<li>work on several (potentially drawn-out) projects simultaneously</li>
<li>rely on some standalone python programs, which may not always be quickly brought up to date</li>
<li>want to use jupyter lab</li>
</ol>
<p>and for these reasons need to have both several versions of python installed and several independent sets of python packages (virtual environments) created for a given python version.</p>
<p>To this end, pyenv provides a unified, high-level interface for simple installation and swapping out both python versions and specific virtual environments - and has become my tool of choice.</p>
<h2 id="the-technicalities">The technicalities</h2>
<p>Instructions below are based on MacOS with zsh and homebrew. The specifics will be different, but pyenv will work on other shells and OSs.</p>
<h3 id="installation---pyenv">Installation - pyenv</h3>
<p>When using homebrew (though other ways also available), the installation is straightforward. Pre- and post-installation steps are listed in <a href="https://github.com/pyenv/pyenv#homebrew-on-macos">pyenv&rsquo;s readme</a> on github, and can be summarised in three steps:</p>
<ol>
<li>Instal dependencies if not present already (xcode tools, openssl and the like).</li>
<li>Install pyenv itself: <code>brew install pyenv</code></li>
<li>Add pyenv init to the shell by editing the <code>.zshrc</code> (or equivalent) file. More on that later.</li>
</ol>
<p>Note: if python was previously installed with homebrew, it does not need to be removed: the pyenv-installed python lives entirely separately from the homebrew-installed one. I did remove it on my desktop (which involved disassembling a tangle of dependencies one by one), but in hindsight it was a waste of time.</p>
<p>After pyenv, it is good to install <a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv</a>, a pyenv plugin which provides features to manage virtual environments, with <code>brew install pyenv-virtualenv</code>. Its readme suggests making another addition to <code>.zshrc</code> (pyenv virtualenv-init, to enable auto-activation of environments), which I personally skipped.</p>
<p>Unfortunately, pyenv does not mix smoothly with homebrew. When things are left alone, <code>brew doctor</code> will complain about existence of python config files created by pyenv, and, if I understand correctly, homebrew formulae having python as dependency would use the pyenv-managed python (potentially leading to mixups). According to recommendations <a href="https://raycent.medium.com/managing-python-on-macos-the-clean-way-7673cab874f6">here</a> and <a href="https://github.com/pyenv/pyenv/issues/106">here</a>, the best way to deal with it is by adding an alias for homebrew to <code>.zshrc</code>. This should make homebrew oblivious to the existence of pyenv-installed python (the homebrew-installed python will be used as a dependency for everything else homebrew does). While this means having two separate python ecosystems, seamless operation far outweighs the redundancy.</p>
<p>In the end, here are the three <code>.zshrc</code> additions: one for pyenv, one for pyenv-virtualenv, and one for aliasing homebrew. I placed them all inside the <code>if</code> block (check if pyenv is available) suggested in pyenv&rsquo;s readme.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">command</span> -v pyenv 1&gt;/dev/null 2&gt;<span class="p">&amp;</span>1<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">	<span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>pyenv init -<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>pyenv virtualenv-init -<span class="k">)</span><span class="s2">&#34;</span>  <span class="c1"># OPTIONAL</span>
</span></span><span class="line"><span class="cl">	<span class="nb">alias</span> <span class="nv">brew</span><span class="o">=</span><span class="s1">&#39;env PATH=&#34;${PATH//$(pyenv root)\/shims:/}&#34; brew&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><h3 id="organising-things-with-pyenv">Organising things with pyenv</h3>
<p>With pyenv installed, I think this is a reasonable way to proceed:</p>
<ul>
<li>install the latest python version and set it as global</li>
<li>install other versions, needed for virtualenvs or standalone programs</li>
<li>install jupyter lab under global</li>
<li>for each project that uses jupyter, install an ipykernel (see below)</li>
<li>for each standalone, switch to the needed python version before installation or usage</li>
</ul>
<h3 id="organising-things-for-jupyter">Organising things for jupyter</h3>
<p>Pyenv or not, I think the right way for working with virtual environments is to install jupyter lab only once, globally (that is under your primary python version), and then only install <em>kernels</em> for each environment you want to use with jupyter (<a href="https://ipython.readthedocs.io/en/stable/install/kernel_install.html">docs here</a>). To install a project-specific (virtualenv-specific) kernel:</p>
<ul>
<li>Activate virtualenv</li>
<li>Install the ipykernel package inside: <code>pip install ipykernel</code></li>
<li>Register a new kernel: <code>ipykernel install --user --name myenv --display-name &quot;Python (myenv)&quot;</code></li>
<li>Deactivate</li>
</ul>
<p>Kernels can be listed with <code>jupyter kernelspec list</code> and, if no longer needed, removed with <code>jupyter kernelspec remove</code>.</p>
<h3 id="usage-pyenv-commands">Usage: pyenv commands</h3>
<p>The list of pyenv commands is available <a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md">here</a> and can be displayed with <code>pyenv commands</code>. For me, these are the most important:</p>
<ul>
<li><code>pyenv shell x.y.z</code> to use python x.y.z in the current shell</li>
<li><code>pyenv activate &lt;name&gt;</code> to manually activate a pyenv virtualenv</li>
<li><code>pyenv whence &lt;some executable&gt;</code> to see which environment has that executable (e.g. atlasreader)</li>
<li><code>pyenv version</code> to see which version is currently active</li>
<li><code>pyenv versions</code> to see versions available</li>
<li><code>pyenv help &lt;command&gt;</code> to get help for a command</li>
</ul>
]]></content></item><item><title>Working with Siemens physio (.puls) files</title><link>https://mslw.github.io/posts/2020-12-17-working-with-siemens-physio/</link><pubDate>Thu, 17 Dec 2020 16:25:00 +0100</pubDate><guid>https://mslw.github.io/posts/2020-12-17-working-with-siemens-physio/</guid><description>Siemens Physiological Monitoring Unit uses its own format for data storage. Conveniently, it produces text files with a fairly simple representation, which should be easy to parse. I only worked with pulse oximetry, but similar rules should hold for other physio data. This is a compilation of external sources, own experiences and code snippets.
Toolboxes Before we dig into the files: you may find what you already need in one of the following toolboxes (with which I have no experience), both in Matlab:</description><content type="html"><![CDATA[<p>Siemens Physiological Monitoring Unit uses its own format for data storage. Conveniently, it produces text files with a fairly simple representation, which should be easy to parse. I only worked with pulse oximetry, but similar rules should hold for other physio data. This is a compilation of external sources, own experiences and code snippets.</p>
<h2 id="toolboxes">Toolboxes</h2>
<p>Before we dig into the files: you may find what you already need in one of the following toolboxes (with which I have no experience), both in Matlab:</p>
<ul>
<li><a href="https://sites.google.com/site/phlemtoolbox/">Physiological Log Extraction for Modelling</a> (PhLEM) - a toolbox to generate physiological covariates to be included as regressors in SPM GLM</li>
<li><a href="https://gitlab.ethz.ch/physio/physio-doc">PhysIO toolbox</a>, part of Translational Algorithms for Psychiatry-Advancing Science (TAPAS) collection</li>
</ul>
<h2 id="sources">Sources</h2>
<p>The information is out there, but it was not very easy to find and not always consistent (no doubt due to different variations of the format produced by different scanners or software versions). My primary references are the following:</p>
<ol>
<li><a href="https://wiki.humanconnectome.org/display/PublicData/Understanding+Timing+Information+in+HCP+Physiological+Monitoring+Files">HCP wiki</a></li>
<li><a href="https://www.mccauslandcenter.sc.edu/crnl/tools/part">PART toolbox website</a> from McCausland center (by Chris Rorden)</li>
<li><a href="https://gitlab.ethz.ch/physio/physio-doc/-/wikis/MANUAL_PART_READIN">Documentation for PhysIO toolbox</a> from ETH Zurich</li>
<li><a href="https://cfn.upenn.edu/aguirre/wiki/public:pulse-oximetry_during_fmri_scanning">GKAguirre lab wiki</a></li>
</ol>
<h2 id="file-structure">File structure</h2>
<p>Based on what I&rsquo;ve seen, some details may depend on hardware &amp; software versions used, but the general principles should be the same. The example below is based on the data obtained on the Trio scanner at the Laboratory of Brain Imaging. At the end I will also point out differences in the data collected on a Prisma in a different lab.</p>
<p>The .puls file is just a text file, in which the first line contains all the data points (!), and the following lines contain metadata. It looks like this:</p>
<pre tabindex="0"><code>1 2 40 280 1102 1069 1031 1017 1136 1449 …
ECG  Freq Per: 0 0
PULS Freq Per: 100 595
RESP Freq Per: 0 0
EXT  Freq Per: 0 0
ECG  Min Max Avg StdDiff: 0 0 0 0
PULS Min Max Avg StdDiff: 448 1298 607 2
RESP Min Max Avg StdDiff: 0 0 0 0
EXT  Min Max Avg StdDiff: 0 0 0 0
NrTrig NrMP NrArr AcqWin: 0 0 0 0
LogStartMDHTime:  54133082
LogStopMDHTime:   55183837
LogStartMPCUTime: 54132545
LogStopMPCUTime:  55179315
6003
</code></pre><p>The first four (?) digits in the first line are probably acquisition parameters (the meaning of which I don&rsquo;t know), the remaining are signal values interspersed with some markers (values &lt; 5000 are data samples, values &gt;= 5000 are markers that have to be sifted out). Values 5003 and 6003 are apparently used to mark the beginning and end of the metadata (5003 ends the first line). Sampling frequency for our setup is 50 Hz (but it can be easily verified).</p>
<p>There are plenty 5000 markers in the signal and I am not sure what they represent - judging by their location just after signal peaks, they seem to be heart beat markers[^2] inserted by the software (presumably analogous to the red triangles shown on the technician&rsquo;s console while monitoring the signal). Even if that is the case, you will most likely want to use a peak detection method from your favourite data analysis suite instead.</p>
<p>In the metadata, the crucial entries to watch for are the MDH Times[^1], expressed in milliseconds after midnight. Although notation is different, they are taken from the same clock as the time values in DICOM files and can be used for synchronising the two modalities.</p>
<h2 id="loading-the-data-using-python">Loading the data using python</h2>
<p>Numpy and pydicom libraries are essential; we will also use the built-in itertools:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pydicom</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span>
</span></span></code></pre></div><p>Let&rsquo;s start by defining paths to the pulse file and the first dicom file of a given series:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pulse_file_name</span> <span class="o">=</span> <span class="n">path_to_the_pulse_file</span>
</span></span><span class="line"><span class="cl"><span class="n">dicom_file_name</span> <span class="o">=</span> <span class="n">path_to_the_dicom_file</span>
</span></span></code></pre></div><p>Loading the signal and dropping the markers is trivial, just remember to specify <code>dtype</code> &amp; <code>max_rows</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">loadtxt</span><span class="p">(</span><span class="n">pulse_file_name</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">int</span><span class="p">,</span> <span class="n">max_rows</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">:]</span>  <span class="c1"># drop parameters stored at the beginning</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">data</span> <span class="o">&lt;</span> <span class="mi">5000</span><span class="p">)]</span>  <span class="c1"># drop markers</span>
</span></span></code></pre></div><p>We can read all the metadata (although we only need <code>LogStartMDHTime</code>) into a dictionary:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">meta</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">pulse_file_name</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">islice</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">None</span><span class="p">):</span>  <span class="c1"># read from second line to the end</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">meta</span><span class="p">[</span><span class="n">k</span><span class="o">.</span><span class="n">strip</span><span class="p">()]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># don’t care about entries which can&#39;t be split into key: value</span>
</span></span><span class="line"><span class="cl">            <span class="k">pass</span>
</span></span></code></pre></div><p>The time needs to be converted from string to a number, we can also convert it from miliseconds to seconds:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pulse_time_sec</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">meta</span><span class="p">[</span><span class="s1">&#39;LogStartMDHTime&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mf">0.001</span>
</span></span></code></pre></div><p>Now, to read the time from dicom header we can use pydicom. I am using field (0008, 0032) Acquisition Time:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">ds</span> <span class="o">=</span> <span class="n">pydicom</span><span class="o">.</span><span class="n">dcmread</span><span class="p">(</span><span class="n">dicom_file_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">dicom_time</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="n">AcquisitionTime</span>
</span></span></code></pre></div><p>The time looks like this: <code>'090029.930000'</code>. The first two digits are hours, next two are minutes, next two - seconds. Four digits after the dot are <em>tics</em> (1/10000 of a second), and the two trailing zeros can be ignored. A conversion function (translating into seconds) can look as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">dicomtime2sec</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">h</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">t</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">m</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">tics</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">7</span><span class="p">:</span><span class="mi">11</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">(</span><span class="n">h</span> <span class="o">*</span> <span class="mi">3600</span> <span class="o">+</span> <span class="n">m</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">+</span> <span class="n">s</span> <span class="o">+</span> <span class="n">tics</span> <span class="o">*</span> <span class="mf">0.0001</span><span class="p">)</span>
</span></span></code></pre></div><p>We will use this function to convert the value into seconds after midnight (same as physio recordings) and then calculate the offset between the recordings. Take care with studies lasting through midnight!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">dicom_time_sec</span> <span class="o">=</span> <span class="n">dicomtime2sec</span><span class="p">(</span><span class="n">dicom_time</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">delta_time</span> <span class="o">=</span> <span class="n">pulse_time_sec</span> <span class="o">-</span> <span class="n">dicom_time_sec</span>
</span></span></code></pre></div><p>With that, we have all we need (pulse oximetry signal and its start time relative to the MRI data)!</p>
<p>Finally, we can verify the sampling frequency by dividing the number of samples by the duration read from metadata (likely it won&rsquo;t be <em>exactly</em> 50 Hz, but it should come negligibly close):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">duration</span> <span class="o">=</span> <span class="p">(</span> <span class="nb">int</span><span class="p">(</span><span class="n">footer</span><span class="p">[</span><span class="s1">&#39;LogStopMDHTime&#39;</span><span class="p">])</span> <span class="o">-</span> <span class="nb">int</span><span class="p">(</span><span class="n">footer</span><span class="p">[</span><span class="s1">&#39;LogStartMDHTime&#39;</span><span class="p">])</span> <span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span> <span class="c1"># in seconds</span>
</span></span><span class="line"><span class="cl"><span class="n">calculated_fs</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">duration</span>
</span></span></code></pre></div><p>The result can now be saved in a desired format for further processing. When exporting, consider using the <a href="https://bids-specification.readthedocs.io/en/stable/04-modality-specific-files/06-physiological-and-other-continuous-recordings.html">BIDS convention for physiological recordings</a>, which uses a gzip compressed tsv file for data (tip: use <code>numpy.savetxt</code> - for filenames ending in <code>.gz</code>, the file is automatically compressed) and a json file to store sampling frequency and relative start time (tip: use <code>json.dump</code> from built-in json library).</p>
<p>This is left as an exercise for the reader, and so is dealing with cases when you have to divide one pulse recording made across several MRI runs.</p>
<h2 id="prisma---note-on-the-differences">Prisma - note on the differences</h2>
<p>I also had a chance to take a look at data from another lab, which has a Prisma scanner. It was <em>same, but different</em>. Most notably, it had text metadata inserted <em>inbetween</em> the data values. Luckily, the marker convention seems to be clear, with 5002 and 6002 values used to mark the beginning and end of the inserted information. Interestingly, the sampling frequency turned out to be 400 Hz in this case. Beginning of the data may look as follows:</p>
<pre tabindex="0"><code>1 2 40 280 5002 LOGVERSION_PULS   1 6002 3185 3167 &lt; ... about 200 datapoints ...&gt; 5002 uiHwRevisionPeru/ucHWRevLevel: 0, uiPartNbrPeruPub: 0, uiHwRevisionPpu/ucSWSubRevLevel: 0, uiPartNbrPpuPub: 0, uiSwVersionPdau/ucSWMainRevLevel: 0 6002 1395 1391 ... 
</code></pre><p>The <code>numpy.loadtxt</code> function used previously will obviously crash on such input, luckily the most basic way of processing won&rsquo;t be much slower. Let&rsquo;s read the line, split by spaces and collect one element at a time (pausing collection for items between 5002 and 6002):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">read_pulse</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="n">elements</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">read</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">elements</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">elem</span> <span class="o">==</span> <span class="s1">&#39;5002&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">read</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">elem</span> <span class="o">==</span> <span class="s1">&#39;6002&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">read</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">read</span> <span class="o">==</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">elem</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span></code></pre></div><hr>
<p>[^1] According to the website for PART, MDH is the DICOM clock, while MPCU is the physio clock. Of the sources, only the Aguirre wiki suggests using MPCU, which is likely a mistake.</p>
<p>[^2] Aguirre wiki suggests that they are scanner pulses marking TR, but the timing doesn&rsquo;t check out, so maybe it depends on software version.</p>
]]></content></item><item><title>Docker pruning</title><link>https://mslw.github.io/posts/2020-12-17-docker-pruning/</link><pubDate>Thu, 17 Dec 2020 14:00:00 +0100</pubDate><guid>https://mslw.github.io/posts/2020-12-17-docker-pruning/</guid><description>Sometimes (especially after messing around with several different images) I get the „No space left on device” error when doing even the simplest of tasks (e.g. running a small container or trying to build a new one). This issue may be MacOS-specific. Finding a clear answer wasn’t straightforward, so below I summarise what I learned.
The problem boils down to the Docker’s disk image, located (on MacOS) under:
~/Library/Containers/com.docker.docker/Data/vms/0/Docker.qcow2 See Stackoverflow: What is Docker.</description><content type="html"><![CDATA[<p>Sometimes (especially after messing around with several different images) I get the „No space left on device” error when doing even the simplest of tasks (e.g. running a small container or trying to build a new one).
This issue <em>may</em> be MacOS-specific.
Finding a clear answer wasn’t straightforward, so below I summarise what I learned.</p>
<p>The problem boils down to the Docker’s disk image, located (on MacOS) under:</p>
<pre tabindex="0"><code>~/Library/Containers/com.docker.docker/Data/vms/0/Docker.qcow2
</code></pre><p>See  <a href="https://stackoverflow.com/questions/49887747/what-is-docker-qcow2">Stackoverflow: What is Docker.qcow2</a> for details.
In short, this is a virtual disk, with a size cap set to 64 GB by default.
Different things are written there, and not always cleaned, causing it to grow in size (also, I believe that for complex reasons, the space taken on your disk does not necessarily reflect the size of the contents).
Docker is conservative when it comes to removing things.
If it gets filled to the brim, your containers can’t work properly.</p>
<p>For a solution (and different levels of cleanup), read  <a href="https://docs.docker.com/config/pruning/">Docker docs: Prune unused Docker objects</a>.
In short, you can clean up some space by running:</p>
<pre tabindex="0"><code>docker system prune
</code></pre><p>or, more likely using a thorough version (warning: it will destroy data stored in containers):</p>
<pre tabindex="0"><code>docker system prune --images
</code></pre><p>Alternatively, the <em>burnt ground</em> strategy would be to remove the Docker.qcow2 file altogether (as it will rebuild next time docker is used), but it seems unnecessary.</p>
<p>Text initially published on my lab&rsquo;s forum, which has been closed.</p>
]]></content></item><item><title>Inkscape + ImageMagick: a powerful combination</title><link>https://mslw.github.io/posts/2020-09-28-inkscape-imagemagick/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://mslw.github.io/posts/2020-09-28-inkscape-imagemagick/</guid><description>I can&amp;rsquo;t recommend Inkscape enough, either for assembling figures or for building posters. However, Inkscape on its own does not export to tiff. Luckily, this can be accomplished with ImageMagick. Here&amp;rsquo;s a short recipe, and a sort of laudation for both programs.
Recently I had to rework a figure with a schematic of an experimental design. The first version was put together in PowerPoint, but we somehow lost the ungrouped source file, so I had to start from scratch.</description><content type="html"><![CDATA[<p>I can&rsquo;t recommend Inkscape enough, either for assembling figures or for building posters. However, Inkscape on its own does not export to tiff. Luckily, this can be accomplished with ImageMagick. Here&rsquo;s a short recipe, and a sort of laudation for both programs.</p>
<p>Recently I had to rework a figure with a schematic of an experimental design. The first version was put together in PowerPoint, but we somehow lost the ungrouped source file, so I had to start from scratch. Two pieces of free software made the job easy: Inkscape and ImageMagick.</p>
<p>It&rsquo;s easy to start with an A4 page, to have a sense of proportions in print (the graphics are vector, so scaling is not much of an issue anyway). Before saving, it might be useful to limit the page size to content and margins, by going to File → Document Properties (Shift+Ctrl+D) → Page Tab → Resize page to content.</p>
<p>Following that, the conversion can be performed as follows (an updated invocation, based on this <a href="https://gist.github.com/matsen/4263955">gist</a> by matsen). It goes from svg through png to tif, but there is little apparent loss of quality, if any:</p>
<pre tabindex="0"><code>inkscape --export-filename new.png --export-dpi 300 file.svg
convert -compress LZW -alpha remove new.png new.tif
</code></pre><p>As a side note, clipping to content and adding margins could theoretically be incorporated in the export call, as the CLI has <code>--export-margin</code> and <code>--export-area-drawing</code> options, but as of the day of writing they are unsupported; see <a href="https://gitlab.com/inkscape/inkscape/-/issues/1142">this issue</a>.</p>
<p>Tried with Inkscape 1.0 and ImageMagick 6.9.11-22.</p>
]]></content></item><item><title>Now listening: Metallica - S&amp;M2</title><link>https://mslw.github.io/posts/2020-09-02-metallica-sm2/</link><pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate><guid>https://mslw.github.io/posts/2020-09-02-metallica-sm2/</guid><description>About a week ago, Metallica released the S&amp;amp;M2 album, a recording of their live performance with the San Francisco Symphony Orchestra from September 2019 (and a follow-up on a similar collaboration from twenty years prior, April 1999). In my opinion, the first metal musician was Wagner, so Metallica recording with a symphony orchestra should make perfect sense, yet I was never very fond of the 99 edition. The new one, though, made a huge impression: I was listening to Spotify at work and had to take a short break to focus on the music.</description><content type="html"><![CDATA[<p>About a week ago, Metallica released the <em>S&amp;M2</em> album, a recording of their live performance with the San Francisco Symphony Orchestra from September 2019 (and a follow-up on a similar collaboration from twenty years prior, April 1999). In my opinion, the first metal musician was Wagner, so Metallica recording with a symphony orchestra should make perfect sense, yet I was never very fond of the 99 edition. The new one, though, made a huge impression: I was listening to Spotify at work and had to take a short break to focus on the music.</p>
<p>As a sample, here&rsquo;s the video for <a href="https://www.youtube.com/watch?v=0m6smR-M2qg&amp;list=PLJvQXRgtxlun3X_n2qLlLwU4O-az1enx6&amp;index=6&amp;t=0s">For Whom the Bell Tolls</a> (<em>arguably the best metal song ever inspired by the work of Ernest Hemingway</em>, in the words of Axl Rosenberg from <a href="https://www.metalsucks.net/2020/08/20/metallica-release-for-whom-the-bell-tolls-sm%c2%b2-performance/">Metalsucks</a>). One of the bonuses of the video is the chance to see Robert Trujillo in a shiny suit (carefully paired with sneakers). I haven&rsquo;t listened to the full album (which clocks in at about 2,5 hours) from start to finish, but I took in most of the songs at a partially random order.</p>
<p>What did I like so much about S&amp;M2? First and foremost, it is the mastering: the orchestra never gets drowned by the electric guitars, which must have required some serious craftsmanship (note: my memory of the 99 recording is that the orchestra mostly faded into the background; however I didn&rsquo;t get this impression when re-listening to <em>The Call of Ktulu</em> on Spotify today, so maybe my perception of the first S&amp;M can be blamed on the quality of the YouTube videos from several years ago - or maybe just my mood or concentration on the first listens). The sound does get a bit busy at times, but remains impressive throughout. On top of orchestra and the band, the live crowd was blended in just right, sometimes present and sometimes completly absent, transferring the concert atmosphere without obscuring the music.</p>
<p>Second, while the album is pretty much a <em>greatest hits</em> sellection, each song really gains its unique character in this rendition.</p>
<p>And finally, the album includes one piece performed entirely by the Orchestra, where gets to shine: the <em>Scythian Suite, Op. 20 II: The Enemy God And The Dance Of The Dark Spirits</em> by Sergei Prokofiev (1915), and it is pure metal (or, as Musical Director of the SF Symphony, Michael Tillson Thomas, says in the intro included in the album, <em>this piece that we&rsquo;re playing you now is one of those moments in which classical music and heavy metal sort of fused and combined</em>). It is followed by <em>The Iron Foundry</em> by Alexander Mosolov (1926), re-interpreted by Metallica and the Orchestra, which absolutely slaps - very much like the entire album.</p>
]]></content></item><item><title>Star Wars Jedi: Fallen Order game review</title><link>https://mslw.github.io/posts/2020-06-09-jedi-fallen-order/</link><pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate><guid>https://mslw.github.io/posts/2020-06-09-jedi-fallen-order/</guid><description>Recently, I completed the latest Star Wars game. I had a good time, but was left wanting more. Here&amp;rsquo;s my thoughts.
Introduction Star wars Jedi: Fallen order came out in November 2019 and most certainly it has already been reviewed left and right (and has an overall score of 79 on metacritic at the time of writing). Given that I don’t play many different titles, let alone finish them, I thought I could attempt a review of my own.</description><content type="html"><![CDATA[<p>Recently, I completed the latest Star Wars game. I had a good time, but was left wanting more. Here&rsquo;s my thoughts.</p>
<h2 id="introduction">Introduction</h2>
<p>Star wars Jedi: Fallen order came out in November 2019 and most certainly it has already been reviewed left and right (and has an overall score of 79 <a href="https://www.metacritic.com/game/playstation-4/star-wars-jedi-fallen-order">on metacritic</a> at the time of writing). Given that I don’t play many different titles, let alone finish them, I thought I could attempt a review of my own.</p>
<p>I have three major impressions. First, the game feels a lot like a 3D platformer with combat elements (more Rayman than Witcher, to my surprise). Second, it is an absolute eye candy. Third, while comparisons to Dark Souls are understandable, the latter has better climate and more combat depth (I played Dark Souls 3 quite a bit, but never progressed very far).</p>
<h2 id="plot--characters">Plot &amp; characters</h2>
<p>The game is set five years after the events of Revenge of the Sith movie (Episode III). The player takes on the role of Cal, a Jedi padawan who managed to escape the Jedi purge and is now forced into hiding. This means that from the very beginning of the game he owns a lightsaber and has certain prowess in using the Force, but his repressed memories provide an explanation for some skills being unlocked throughout the story. Many of them are related to mobility, and are cleverly brought about by training flashbacks triggered at moments when they become essential to progress through a map. The motif of having to accept the past to be able to move forward is nicely played out at one point of the story, in its later stages, but other than that I didn’t feel especially engaged emotionally with the protagonist.</p>
<p>Other characters didn’t seem very interesting either. The most important of them, Cere (Cal’s mentor) and the Second Sister (main villain) felt just OK, even though their backstories were supposed to be powerful (involving betrayal, torture, dark side, etc.). The side characters seemed bland, with the glaring exception of Prauf, Cal’s only friend throughout his period of hiding: a seasoned blue collar worker belonging to the Scrappers Guild, sincere and warm-hearted, with modest ambitions. Even though he only appears in the prologue, he was my favourite character - helped, probably, by the voice acting from <a href="https://pl.wikipedia.org/wiki/Wojciech_%C5%BBo%C5%82%C4%85dkowicz">Wojciech Żołądkowicz (PL)</a>.  Also quite interesting (and with more screen time) was  Greez: an older, uncle-type pilot with beer belly and gambling addiction, referring to the protagonist in the tone of &lsquo;one day, kid, I should teach you how to pilot a ship… not on my ship, of course’. His voice acting, by <a href="https://pl.wikipedia.org/wiki/Janusz_Wituch">Janusz Wituch (PL)</a> was pretty much on point, too. Speaking of which, the Polish dubbing was overall really good, ranging from OK to seriously great, and I was at no point tempted to search for an option to switch to original.</p>
<p>Actually, there is one more character who definitely deserves a mention: BD-1, Cal&rsquo;s robot companion. He communicates only with series of beeps, apparently understandable to Cal, but obviously not the player; the small dialogues triggered from time to time are always nice. What is best, however, is BD-1&rsquo;s movement animation, which allows the rather minimalistic robot to have its own personality.</p>
<p>Overall, the plot seemed fairly unremarkable, at times to the point of being cliche. You travel the galaxy, meet interesting people, and kill stormtroopers. You get to swing a lightsaber a lot though, and maybe that’s all a Star Wars game really needs.</p>
<p>Speaking of the plot, for me the low point came at Kashyyk, where serious effort leads to establishing contact with Wookie chieftain Tarfful… only for the protagonist to learn in a quick encounter that indeed, he needs to climb the humongous Origin Tree, and that indeed, to get to the top, one must start at the bottom. Only in a few dialogues does the player have to choose an option, but the choices never seem meaningful. Enough said, it is no Witcher game.</p>
<p>That being said, there are high points as well. The prologue, where the player learns character control by navigating a spaceship scrapyard (where Cal worked with Prauf), is a masterclass in climate, built through visuals and overheard conversations: to me it felt like a communist-era shipyard moved to cosmos. As mentioned above, Cal’s flashbacks take a serious turn as the story develops, and for a while become actual character development. And Cal’s vision at Bogano, leading into the final part of the game, is downright serious and creepy.</p>
<h2 id="gameplay">Gameplay</h2>
<p>There are two main components to the gameplay. The first of them is lightsaber combat, which boils down to well timed attacks, parries, blocks and dodges, preferrably executed on a gamepad, in a manner similar to the esteemed Dark Souls series.</p>
<p>Second, the 3D platfrmer aspect is strong, and for this reason I think that the game should be compared not only to Dark Souls, but also to Rayman. At one or two moments I honestly expected to see yelow lums waiting to be collected.</p>
<p>Unlike in Dark Souls, the difficulty level it can be adjusted, affecting parry timing, damage taken and enemy aggression. I played through on <em>Jedi Master</em>, third out of four available, which appears to be a reasonably challenging option. Regular enemies seemed reasonably balanced, while boss fights were at times frustrating. That being said, in welcome opposition to my Dark Souls experiences, even on a first encounter with a boss I was able to live long enough to gauge their moveset and strategy. Enemies, even weak, were much harder to deal with in groups, when I struggled mostly with target switching (although I don&rsquo;t know if that is a problem with game controls or just me). This is mitigated by an acquisition of a dual lightsaber later in the game, as its attacks can be spammed to a great effect againist mobs.</p>
<p>I really liked the fact that single and dual blade modes (which can be easily toggled once tha latter is acquired) have noticably different mechanics, with the former having higher damage on a single hit, and the latter offering quick and spammable, but weaker attacks. I am no lightsaber expert, but I would say that Cal&rsquo;s overall fighting style can be classified as <a href="https://starwars.fandom.com/wiki/Form_V/Legends">Form V</a>, with its <em>heavy focus on brute strength and pure power, with wide, powerful strikes and parries followed immediately by a counterattack</em> (perhaps mostly because of gameplay demands than anything else). Overall, fighting was satisfying, even though compared to Dark Souls enemy movesets felt somewhat limited.</p>
<p>The biggest part of the game focuses on navigating vast locations and fighting one&rsquo;s way through to reach a target. The progression is punctuated by activating &lsquo;meditation spots&rsquo; located in predefined places, which serve as save points. They can also be used to replenish health, which causes enemies to respawn - just like bonfires in Dark Souls. Unlike in Dark Souls, where bonfires always feel way too scarce, here they are spaced just right.</p>
<p>In another clue from Dark Souls, some passages have to be unlocked by going the long way round, providing a shortcut for when the location needs to be revisited. Other require using a specific force ability, which is &lsquo;rediscovered&rsquo; at some point. Together, these mechanics help streamline the plot in a fairly natural manner.</p>
<p>Speaking of movement - and there really is plenty of jumping - some jumps off a rope or cliff&rsquo;s edge, to catch another rope seemed to behave erratically, with the character taking a turn seemingly at random. Again, I can&rsquo;t really tell if that&rsquo;s an errant game mechanic, or an unnoticed mistake with camera management on my side. For me, the Rayman-style platformer action was at points drawn out and tedious, but the pace picked up noticeably in the final, combat - heavy part of the game.</p>
<p>An additional element of gameplay is finding chests and echoes, somwewhat hidden all over the locations. Echoes are just that, echoes of the past, which provide backstory and grant some experience points when unlocked. Chests contain cosmetic items (poncho color schemes, lightsaber elements etc.) which affect nothing more than the look of things. For some reason I enjoyed the collectible aspect a lot, and paired with the sheer graphics quality it encouraged me to wander around each location a bit longer than strictly necessary much more than a simple x% statistic would.</p>
<p>Interestingly, the game was quite concise: I was neither rushing things nor trying to check every nook and cranny, and I have 36 hours logged on Steam, which includes a few spots that had me stuck for longer than they probably should if I were more skilled. There is an NG+ mode, conveniently <a href="https://kotaku.com/star-wars-jedi-fallen-order-update-adds-new-game-plus-1843244046">added in an update</a> recently. It allows for a replay of the main story while keeping the collected cosmetic items (I&rsquo;ll pass on that) but it also adds &lsquo;meditation training&rsquo;, which, as far as I understand, means fighting predefined waves of enemies. As I liked the combat element, I&rsquo;ll probably give it a few hours.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I think I managed to say it all above - Star Wars Jedi: Fallen Order has its shortcomings in terms of plot and gameplay, but it is fun and looks stunningly pretty.</p>
]]></content></item><item><title>A new rabbit hole: sim racing</title><link>https://mslw.github.io/posts/2020-05-12-rabbit-hole-simracing/</link><pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate><guid>https://mslw.github.io/posts/2020-05-12-rabbit-hole-simracing/</guid><description>Due to the COVID-19 pandemic and related cancellation of F1 season, sim racing has been receiving a lot of attention, and after a while I gave in and bought a wheel for my PC. In this post I summarise my initial impressions from Raceroom.
Hardware Dealing with hardware is unavoidable here - while in a real car the driver gets plenty of physical feedback from, well, being in the car, in sim car all sensations have to be conveyed either through the screen or through the wheel.</description><content type="html"><![CDATA[<p>Due to the COVID-19 pandemic and related cancellation of F1 season, sim racing has been receiving a lot of attention, and after a while I gave in and bought a wheel for my PC. In this post I summarise my initial impressions from Raceroom.</p>
<h2 id="hardware">Hardware</h2>
<p>Dealing with hardware is unavoidable here - while in a real car the driver gets plenty of physical feedback from, well, being in the car, in sim car all sensations have to be conveyed either through the screen or through the wheel. For that reason, wheels provide so called Force Feedback: the wheel can rotate itself (or resist rotation) with a force that varies depending on the state of the simulated car. Naturally, some games (although realistically simcades rather than full blown sims) can be played with a gamepad and purely by visual cues, but having an almost regularly sized wheel makes a world of difference for car control (and also for immersion).</p>
<p>I bought the Thrustmaster T150, which was by far the cheapest force feedback option on the market. <a href="https://youtu.be/uvynGx_pgl8">This</a> is the review that convinced me, and <a href="https://youtu.be/fMiT_Jsk4rU">this video</a> provides an overview of racing wheel types and models. Although all videos I watched put Logitech G29 as the king of budget options, the T150 seems to trail mainly in the pedals department - and not having any other experience, I am fully satisfied with what I got (especially given the price difference).</p>
<p>The only minor gripe I have is with the desk clamp. I haven&rsquo;t found it clearly stated in any reviews, but it requires the desk&rsquo;s lip to be about 7 cm long (deep?). Given that I sit at an Ikea Kullaberg, I have only 5 cm to work with, and I can&rsquo;t slide the wheel fully in - luckily putting a folded piece of paper under the wheel to keep the upper part level (while front rubber feet are in the air) is enough to get a stable mount.</p>
<h2 id="software">Software</h2>
<p>Following the advice from Chris Haye&rsquo;s <a href="https://www.youtube.com/watch?v=j76QQSWxmWQ">What&rsquo;s The Best Racing Sim For Beginners</a> video, I chose Raceroom and the impressions have been overwhelmingly positive. The game is free to play with a rather limited number of cars and tracks included (I&rsquo;d go as far as saying it feels like a demo), but most of content is available through microtransactions. Such a model can be a bit of an issue, as costs may sometimes build up, but I think in this case it is fair (especially given that paid DLCs seem to be popular in sim racing games). For 25 euro I was able to get enough to keep me entertained for, I imagine, quite a while: a &ldquo;starter pack&rdquo; (10 cars, 5 tracks), plus two Volvos, Seat Cupra and the fabulous Spa-Francorchamps track.</p>
<p>Judging by the patchnotes (example from <a href="https://forum.sector3studios.com/index.php?threads/raceroom-patchnotes-thread.261/page-7#post-200143">here</a>), the game is actively developed, and the developers are taking things really seriously:</p>
<blockquote>
<p>All cars - Modifications to upshifts and downshifts engine revs. Gearshifts are now more brutal™. Older cars from 70’s / 80’s / 90’s also received specific upshift backfires.</p>
</blockquote>
<h2 id="wetware-impressions">Wetware (impressions)</h2>
<h3 id="the-feel">The feel</h3>
<p>This is probably the most important part: the game can get really immersive. The first two afternoons were filled with a rather frustrating struggle to keep the car on asphalt, but on day three things clicked and I found myself dialing in lap after lap, mouth half-open, fully focused. The &lsquo;one more lap&rsquo; syndrome is serious. Of course, each car or track is a completely new learning experience, but progress feels good.</p>
<p>The Force Feedback really gets the job done. The steering gets heavy (more than I imagined) under normal loads, lightens up when the car starts slipping, and twitches convincingly over kerbs and bumps (or after some gearshifts), forming a very convincing impression. I won&rsquo;t pretend that I can catch a slide when things go awry, but the weight transfer and car behaviour are communicated very clearly. The paddles for sequential gearbox feel great - they are made of metal and give a very reasurring click (they can be used to control any car, also those that technically have a manual gearbox).</p>
<p>Perhaps the first thing I learned was that the game really does not like going fast into the corners. It&rsquo;s perfectly logical - that&rsquo;s just like in real life - but given that most arcade games have you going hard and fast (years ago I spent many hours in Need for Speed: Porsche, of which I have very fond memories) it takes a while to get used to. Overall, the physics seem reasonable, and a lot boils down to managing weight transfer and being progressive (as opposed to on/off) with the inputs. Different cars do have a very distinct feel.</p>
<p>Another aspect which deserves a highlight is the sound design. Raceroom boasts on their website that their &ldquo;industry leading sound engine gives you the most realistic and breathtaking sound&rdquo;, and indeed, the cars sound properly mechanical, with engine, gearbox and turbo each contributing their noises.</p>
<h3 id="getting-started-cars--tracks">Getting started: cars &amp; tracks</h3>
<p>There is little in the way of tutorials (apart from an option to show an ideal racing line), and my first attempt (having picked the Canhard car and the Raceroom Raceway track, both fictional designs made for the game) was a struggle.</p>
<p>It would seem that the best car to learn (<a href="https://forum.sector3studios.com/index.php?threads/opinion-what-the-best-car-to-learn-in.14908/#post-201899">not just in my opinion</a>), and the one which tremendously helped me understand the game mechanics, is Formula Raceroom Junior. A fictional single seater with rear wheel drive, no aerodynamics, no ABS or traction control, light and adequatly powered: the rear is more than ready to snap if you make a mistake, but things happen at a digestible pace. Great for figuring things out. Another good choice is NSU TTS (paid content) from late 60s, which favours smooth driving, but is slow enough to allow focusing on the track.</p>
<p>First, I used Stowe circuit to get used to the car and then went back to Raceroom Raceway for a completely transformed experience compared to my day 1. The track is fantastic as a demonstration of driving physics (much more readable in FRJ compared to Canhard), but also incredibly tricky. Take this sequence for an example. The right hander leading to the tunnel has a crest at the exit, which means that going on the throttle even a little too quickly ends up in a massive spin as the rear gets unloaded. The tunnel itself is a very long left hander, almost full throttle, but not quite, as bumpy surface unsettles the car a little. The exit has to be planned in advance, as there is another crest waiting to throw the car out of balance. Then an awkward breaking zone into a right hander, leading into an awesome sweeping section ending with a heavy breaking right out of a fast corner into a slow chicane. That I was able to type that out of memory is perhaps the best testament to how involving the game can be.</p>
]]></content></item><item><title>Python, Windows, and how times are changing</title><link>https://mslw.github.io/posts/2020-04-01-python-windows-changing-times/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://mslw.github.io/posts/2020-04-01-python-windows-changing-times/</guid><description>I started using Python in 2011, as part of my BSc curriculum in neuroinformatics (the introductory course was part of the first semester IIRC). The Faculty was running Fedora on all computers, and so was I on my personal laptop. Back then, the advice to people who worked on Windows was to try and avoid that, because things with Python and Windows were complicated.
The common Python on Windows advice soon changed to &amp;ldquo;install anaconda&amp;rdquo;.</description><content type="html"><![CDATA[<p>I started using Python in 2011, as part of my BSc curriculum in neuroinformatics (the introductory course was part of the first semester IIRC). The Faculty was running Fedora on all computers, and so was I on my personal laptop. Back then, the advice to people who worked on Windows was to try and avoid that, because things with Python and Windows were complicated.</p>
<p>The common Python on Windows advice soon changed to &ldquo;install anaconda&rdquo;. This distribution, complete with a set of popular scientific packages (or a simple way to install them) had its initial release (0.8.0) in July 2012, according to Wikipedia.</p>
<p>In practical terms, many of the issues with Windows boiled down to installation of two commonly used packages, numpy (for numerical operations with n-dimensional arrays) and scipy (with further numerical routines, including signal processing, linear algebra and statistics). While on Linux a simple <code>pip install numpy scipy</code> was sufficient ever since I can remember, on Windows it wasn&rsquo;t so simple (<em>If you&rsquo;re on Windows, and you try the same thing with pip, all hell will break loose</em> - stated <a href="https://github.com/numpy/numpy/wiki/Whats-with-Windows-builds">this page from numpy wiki</a>, which also offered detailed explanation). In short, both libaries rely on code written in C and Fortran and there was no agreement on which compilers should be used for Windows (with implications for performance). As a result, no compiled versions (published by the development teams) were available for installation with pip. Anaconda provided those within their ecosystem.</p>
<p>However, that&rsquo;s not to say that it was the only option to get numpy/scipy working on Windows. Respected, yet unofficial, binaries (<em>wheels</em> in Python nomenclature), were provided by Christoph Golke from Laboratory of Fluorescence Dynamics, UC Irvine on <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">his university website</a>. So you could download them manually and install with <code>pip install numpy-&lt;version&gt;.whl</code> (and repeat for upgrades). Very convenient, though I have a feeling that for most people going to some (however respected) person&rsquo;s university website was less appealing than <em>just installing</em> anaconda.</p>
<p>Things changed around 2016, when Numpy team began releasing Windows binaries to <a href="https://pypi.org/">pypi</a> (Python Package Index, default source for installation with pip). I can&rsquo;t quickly find the exact release which introduced those binaries; however in the release notes for 1.11.0 (March 2016) I found this annotation: <em>No Windows (TM) binaries are provided for this release due to a broken toolchain</em>.</p>
<p>Another milestone came in October 2017, when the scipy team decided that their project reached sufficient maturity for the version number to be changed from 0.x to 1.0. The <a href="https://docs.scipy.org/doc/scipy/reference/release.1.0.0.html">release notes</a> started with:</p>
<blockquote>
<p>We are extremely pleased to announce the release of SciPy 1.0, 16 years after version 0.1 saw the light of day. It has been a long, productive journey to get here, and we anticipate many more exciting new features and releases in the future.</p>
</blockquote>
<p>Publication of official Windows wheels was one of the developments leading up to the 1.0 release. As a result, <code>pip install numpy scipy</code> now works seamlessly on Windows.</p>
<p>What&rsquo;s more, developments came on the side of Windows as well. First, <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Windows Subsystem for Linux</a> was introduced, making it possible to literally run Linux on Windows (with bash and all command line goods). And very recently, Microsoft introduced <a href="https://github.com/Microsoft/Terminal">Windows Terminal</a>, a new, <a href="https://www.youtube.com/watch?v=8gw0rXPMMPE">shiny</a> command line interface (which can be used to run cmd, powershell, bash, etc.) with tabs and customisation.</p>
<p>The anaconda distribution definitely a huge appeal, in that it provides not only raw Python, but also a collection of packages and an IDE, as well as methods to manage them (conda, with its own kind of virtual environments), and in <a href="https://www.anaconda.com/tensorflow-in-anaconda/">some cases</a> significant performance optimizations. At the same time, I feel that the main reason conda was being recommended (ease of installation) is not the right reason any more.</p>
]]></content></item><item><title>Beyond Meat</title><link>https://mslw.github.io/posts/2019-11-19-beyond-meat/</link><pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate><guid>https://mslw.github.io/posts/2019-11-19-beyond-meat/</guid><description>Today I finally got to try the Beyond Meat burger at Krowarzywa. This was the second plant-based meat replacement I tried (after the Impossible Burger), but the first one I could get in Poland, which feels good. It was great.
Speaking of the patty, the outside look is the biggest giveaway. The taste is indeed very similar to meat, maybe seasoned in a slightly unusual way, but definitely believable. The texture is really great, not unlike coarsly ground beef.</description><content type="html"><![CDATA[<p>Today I finally got to try the Beyond Meat burger at <a href="https://krowarzywa.pl/">Krowarzywa</a>. This was the second plant-based meat replacement I tried (after the Impossible Burger), but the first one I could get in Poland, which feels good. It was great.</p>
<p>Speaking of the patty, the outside look is the biggest giveaway. The taste is indeed very similar to meat, maybe seasoned in a slightly unusual way, but definitely believable. The texture is really great, not unlike coarsly ground beef.</p>
<p>But what really made that particular burger was the sauces, just like with any other at Krowarzywa. I had spicy tomato and dill, both are just amazing and work really well together. It only makes me wish that more &rsquo;traditional&rsquo; burger places had their sauce game on a comparable level.</p>
]]></content></item><item><title>Dealing with arcane bullshit</title><link>https://mslw.github.io/posts/2019-11-07-arcane-bullshit/</link><pubDate>Thu, 07 Nov 2019 22:30:00 +0100</pubDate><guid>https://mslw.github.io/posts/2019-11-07-arcane-bullshit/</guid><description>Being a young scientist, at times I find myself having to deal with some programing related arcane bullshit. This post is something I wanted to write about for a while.
Case 1: video stimuli The primary culprit in this case is Presentation software from Neurobehavioral Systems, which, fittingly for its name, is a software for rigorously timed stimulus presentation. To be clear - it&amp;rsquo;s a very good, very reliable program and it has been serving our lab well for several years.</description><content type="html"><![CDATA[<p>Being a young scientist, at times I find myself having to deal with some programing related arcane bullshit. This post is something I wanted to write about for a while.</p>
<p><img src="https://imgs.xkcd.com/comics/arcane_bullshit.png" alt="xkcd no 1671"></p>
<h3 id="case-1-video-stimuli">Case 1: video stimuli</h3>
<p>The primary culprit in this case is Presentation software from Neurobehavioral Systems, which, fittingly for its name, is a software for rigorously timed stimulus presentation. To be clear - it&rsquo;s a very good, very reliable program and it has been serving our lab well for several years. It allows for frame-perfect presentation of visual stimuli, playing sounds, creating logs and synchronising with other lab equipment. It has its quirks though. And given that many problems can be solved by bashing one&rsquo;s head on the keyboard long enough (i. e. by spending lots of time reading the documentation and trying things out) I have earned a reputation within our lab for making Presentation work.</p>
<p>One of the things I had to deal with was playing video. The features list states that it can <em>display compressed video using any DirectShow compatible codecs installed on your system</em>. In practice, only after trying to play some file given to you by your colleague do you realise that only .avi container can be opened. And after converting to .avi things still fail, with a cryptic error message about calls to DirectX going wrong.</p>
<p>The solution comes from a semi-official wiki, on which the <a href="http://www.neurobs.com/wiki/Presentation/Video">video</a> page is immensly helpful. The problem is due to codecs. First, you should ideally be using x264, because it&rsquo;s tried and tested. Second, you need to have ffdshow software installed on your PC to ensure that those codecs are available where they are needed (your video player working does not mean Presentation would work too). And as a cherry on top, you need to override some system settings. So you keep telling yourself that you are a serious scientist while you get flashbacks of the 2000&rsquo;s as you download and launch a somewhat shady looking program called Codec Tweek Tool (to make things even more arcane, the wiki specifically tells you to get version 6.1.1 because later releases removed the required functionality). Afterwards, things begin to work.</p>
<p>As a side note, for my current study I need to prepare mp4 files by cutting, resizing, removing audio and converting. My tool of choice is ffmpeg and I keep the following command as a very precious note, maybe it comes useful for somebody else too (the <code>-strict</code> and <code>-experimental</code> flags seem essential for good video quality; <code>-ss</code> and <code>-t</code> are for selecting the right fragment, <code>-vf scale=...</code> scales and <code>-c:v</code> selects the codec):</p>
<pre tabindex="0"><code>ffmpeg -ss &lt;start time&gt; -i INFILE.mp4 -t &lt;duration&gt; -vf scale=1440:1080 -c:v libx264 -an -strict -experimental OUT.avi
</code></pre><h3 id="case-2-port-codes-in-recorder">Case 2: port codes in Recorder</h3>
<p>Second example involves an interface between Presentation and Brain Vision Recorder, again an established and reliable software, used for EEG and other physiological recordings. In many experiments, we mark the presentation of stimuli in the EEG signal by sending markers over an LPT port (essentially using an old printer cable). In Presentation, the experimenter simply needs to assign a number (port code) from 1-128 range to a stimulus.</p>
<p>Behind the scenes, in technical terms, the LPT port has 8 signal lines (8 pins used to send signals) which can be switched from low (0 volts) to high (5 volts) state for several milliseconds with negligible latency. This allows for sending port codes in binary format, so for example number 21 is represented by pins 0, 2 and 4 (I am counting from 0) being set to high, because 21 equals 2^0 + 2^2 + 2^4.</p>
<p>However, by default, Recorder uses only pins 0-3 for stimulus markers, and pins 4-7 for response markers. Therefore, it interprets the above input as Stimulus 5 (2^0 + 2^2) and Response 1 (2^0 as pins 4-7 are counted anew) ocurring at the same time. Such behavior can be useful, can be changed in Recorder&rsquo;s menu, and is described in Recorder&rsquo;s manual, but can be extremely confusing when all you have is a recording where markers are all wrong. And it has caught out several of my colleagues already and gave us a bit of a puzzle for the first time it happened. Turns out that binary representations are useful in life.</p>
<h3 id="case-3-inhouse-usb-too-usb">Case 3: inhouse USB-too-USB</h3>
<p>Speaking of interfacing, there was a time when we had to send some markers through a COM port (a different kind of port, which in this case allows sending pieces of text) using an inhouse USB-to-USB connector. The receiving program (also inhouse) required messages to end with a new line, windows style (which is actually two characters from the <a href="https://en.wikipedia.org/wiki/ASCII">ASCII</a> table, &ldquo;carriage return&rdquo; followed by &ldquo;line feed&rdquo;, usually represented as <code>\r\n</code>). And while Presentation interprets the <code>\n</code> symbol correctly, for some reason it would not accept the <code>\r</code> typed in the script. Luckily, it accepts hexadecimal codes, so the solution was (if I remember correctly) to type it in as <code>\x0D\n</code> (0D in hexadecimal translates to 13 in decimal or 00001101 in binary, which is the ASCII code for &ldquo;carriage return&rdquo;). I believe that many people would classify that as an obscure piece of knowledge.</p>
<h3 id="case-4-explicit-mask-in-spm">Case 4: explicit mask in SPM</h3>
<p>Another example: some time ago I was trying to use the <em>explicit mask</em> option in SPM (arguably the most popular software for fMRI analysis), but got a strange error. The explicit mask is neither a standard, nor a very uncommon setting. After spending hours trying to find an error in my data I tried the same on my colleague&rsquo;s computer, and it worked out of the box. However, he had an older version of SPM. Working from there I could check the source code (luckily that&rsquo;s possible for a toolbox created in Matlab) and locate the error. Only then did I find out that the solution had been posted several months earlier on the SPM&rsquo;s mailing list (but for that I had to search the topics on the mailing list for mentions of the offending function, googling the error message before yielded nothing of use). This was SPM12 revision 6906, published in October 2016 and replaced by revision 7219 in November 2017. For a year, the fix had to be downloaded from a mailing list (or done manually, as it was pretty much a one-liner).</p>
<h3 id="case-5-multiple-displays">Case 5: multiple displays</h3>
<p>The final example is related to HDMI cables and still remains a bit of a mistery to me. In our ongoing experiment we needed to show different things (including picture from a GoPro camera) at different screens at different times. One iteration of our setup (luckily replaced by a more efficient solution) used an HDMI splitter (sends one input to two screens) and had us swap out the cables manually. We found out that after plugging in a cable, we sometimes got the image on one screen, sometimes on the other, and sometimes, seemingly at random, on both (the way we wanted). It turns out that the workings of HDMI are more complex than we initially thought. I don&rsquo;t know the details, but after the connection is made, the computer probes the output devices for their display parameters and adjusts accordingly. If the devices on the other side of the splitter are different, it might get a response from either of them, thus leading to unexpected behaviour (thanks to Alex for pointing that out when we discussed our options over e-mail).</p>
<h3 id="summary">Summary</h3>
<p>What&rsquo;s the moral of all the stories? Apart from the fact that when using different pieces of software and hardware together one should <em>expect</em> things to go wrong and that documentation for scientific software may or may not be lacking it is this: more people should learn things like what ASCII is and how numbers are represented in binary. It does come useful.</p>
]]></content></item><item><title>Why blog</title><link>https://mslw.github.io/posts/2019-11-05-why-blog/</link><pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate><guid>https://mslw.github.io/posts/2019-11-05-why-blog/</guid><description>Why would I start a blog? List of reasons below.
To check out jekyll. At first glance it seems nice and elegant. To have an outlet for occasional bursts of creativity. Sometimes I feel like writing. Sometimes writing helps me organise my thoughts. To practice writing. I read a sound advice on some scientist&amp;rsquo;s blog (unfortunately can&amp;rsquo;t find it now) that scientists should blog, because they need to write a lot, and for that there is no better practice than writing itself.</description><content type="html"><![CDATA[<p>Why would I start a blog? List of reasons below.</p>
<ul>
<li>To check out <a href="https://jekyllrb.com/">jekyll</a>. At first glance it seems nice and elegant.</li>
<li>To have an outlet for occasional bursts of creativity. Sometimes I feel like writing. Sometimes writing helps me organise my thoughts.</li>
<li>To practice writing. I read a sound advice on some scientist&rsquo;s blog (unfortunately can&rsquo;t find it now) that scientists should blog, because they need to write a lot, and for that there is no better practice than writing itself. I like this idea, given that blog format encourages longer, structured texts, compared to most social media. And I could use some practice.</li>
<li>To keep some software-related notes for later reference. Some posts might get technical.</li>
<li>Because I can do this with <a href="https://pages.github.com/">github pages</a>, so why not?</li>
<li>I bought a new keyboard, which doubtlessly is an additional motivating factor.</li>
</ul>
]]></content></item></channel></rss>